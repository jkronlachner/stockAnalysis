[{"C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\index.js":"1","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\serviceWorker.js":"2","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\RoutingIndex.js":"3","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\themes\\theme.js":"4","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\service\\SnackbarProvider.jsx":"5","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\dialogs\\CustomAlertTemplate.jsx":"6","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\redux\\reducers\\index.js":"7","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\service\\backendServices\\IndicatorService.js":"8","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\redux\\actions\\indicator_actions.js":"9","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\service\\backendServices\\UserService.js":"10","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\objects\\enums\\indicatorTemplate.js":"11","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\service\\ProtectedRoute.jsx":"12","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\objects\\enums\\loading.enum.js":"13","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\redux\\selectors\\selectors.js":"14","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\routes\\user\\LogIn.jsx":"15","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\routes\\root\\RootView.jsx":"16","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\redux\\reducers\\user_reducer.js":"17","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\redux\\reducers\\databaseLoading_reducer.js":"18","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\redux\\reducers\\indicators_reducer.js":"19","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\redux\\reducers\\projects_reducer.js":"20","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\redux\\localStorage.js":"21","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\settings.js":"22","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\objects\\project.js":"23","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\objects\\enums\\status.enum.js":"24","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\redux\\actions\\user_actions.js":"25","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\service\\backendServices\\BackendService.js":"26","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\service\\backendServices\\Poller.js":"27","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\routes\\root\\History.jsx":"28","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\routes\\root\\Dashboard.jsx":"29","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\routes\\root\\Settings.jsx":"30","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\routes\\project\\ProjectSettings.jsx":"31","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\inputs\\TextField_Component.jsx":"32","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\routes\\project\\DetailView.jsx":"33","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\routes\\project\\FinishedProjectView.jsx":"34","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\miscellaneous\\SideNavigationBar_Component.jsx":"35","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\service\\backendServices\\JSONParser.js":"36","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\redux\\actions\\project_actions.js":"37","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\service\\backendServices\\ProjectService.js":"38","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\service\\UUIDService.js":"39","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\settingsCollections\\BaseSettings_Component.jsx":"40","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\settingsCollections\\IndicatorSettings_Component.jsx":"41","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\cells\\SettingsCell_Component.jsx":"42","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\service\\backendServices\\TargetDataEditorService.js":"43","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\dialogs\\TargetDataEditor.jsx":"44","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\dialogs\\ImportBasechartDialog_Component.jsx":"45","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\dataDisplay\\Table_Component.jsx":"46","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\inputs\\TimeInput_Component.jsx":"47","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\dialogs\\ChartPreviewDialog_Component.jsx":"48","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\dialogs\\AddIndicatorDialog_Component.jsx":"49","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\dataDisplay\\Indicator_Component.jsx":"50","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\inputs\\IndicatorCreator_Component.jsx":"51","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\redux\\actions\\loading_actions.js":"52","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\miscellaneous\\CreateProject_Component.jsx":"53","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\cells\\HistoryCell_Component.jsx":"54","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\cells\\ProjectTab_Component.jsx":"55"},{"size":1468,"mtime":1615380755800,"results":"56","hashOfConfig":"57"},{"size":5227,"mtime":1615380755825,"results":"58","hashOfConfig":"57"},{"size":1022,"mtime":1619429916587,"results":"59","hashOfConfig":"57"},{"size":3538,"mtime":1615380755830,"results":"60","hashOfConfig":"57"},{"size":1478,"mtime":1615380755819,"results":"61","hashOfConfig":"57"},{"size":1349,"mtime":1615380755785,"results":"62","hashOfConfig":"57"},{"size":933,"mtime":1615380755808,"results":"63","hashOfConfig":"57"},{"size":1563,"mtime":1615380755821,"results":"64","hashOfConfig":"57"},{"size":366,"mtime":1615380755804,"results":"65","hashOfConfig":"57"},{"size":2254,"mtime":1615380755825,"results":"66","hashOfConfig":"57"},{"size":289,"mtime":1615380755801,"results":"67","hashOfConfig":"57"},{"size":630,"mtime":1616166848825,"results":"68","hashOfConfig":"57"},{"size":104,"mtime":1615380755802,"results":"69","hashOfConfig":"57"},{"size":1494,"mtime":1616166848822,"results":"70","hashOfConfig":"57"},{"size":4901,"mtime":1616166848824,"results":"71","hashOfConfig":"57"},{"size":4568,"mtime":1619430198972,"results":"72","hashOfConfig":"57"},{"size":454,"mtime":1615380755810,"results":"73","hashOfConfig":"57"},{"size":417,"mtime":1615380755807,"results":"74","hashOfConfig":"57"},{"size":410,"mtime":1615380755808,"results":"75","hashOfConfig":"57"},{"size":6255,"mtime":1615380755809,"results":"76","hashOfConfig":"57"},{"size":902,"mtime":1615380755806,"results":"77","hashOfConfig":"57"},{"size":50,"mtime":1619604098335,"results":"78","hashOfConfig":"57"},{"size":1211,"mtime":1615380755802,"results":"79","hashOfConfig":"57"},{"size":579,"mtime":1615380755802,"results":"80","hashOfConfig":"57"},{"size":315,"mtime":1615380755806,"results":"81","hashOfConfig":"57"},{"size":3992,"mtime":1616166848826,"results":"82","hashOfConfig":"57"},{"size":1706,"mtime":1619429916603,"results":"83","hashOfConfig":"57"},{"size":1660,"mtime":1615380755816,"results":"84","hashOfConfig":"57"},{"size":2881,"mtime":1615380755816,"results":"85","hashOfConfig":"57"},{"size":4709,"mtime":1619429916601,"results":"86","hashOfConfig":"57"},{"size":10284,"mtime":1619429916598,"results":"87","hashOfConfig":"57"},{"size":4210,"mtime":1615380755788,"results":"88","hashOfConfig":"57"},{"size":5492,"mtime":1615380755813,"results":"89","hashOfConfig":"57"},{"size":8088,"mtime":1615380755814,"results":"90","hashOfConfig":"57"},{"size":5990,"mtime":1615380755791,"results":"91","hashOfConfig":"57"},{"size":3258,"mtime":1616166848827,"results":"92","hashOfConfig":"57"},{"size":3074,"mtime":1615380755805,"results":"93","hashOfConfig":"57"},{"size":4668,"mtime":1616166848829,"results":"94","hashOfConfig":"57"},{"size":219,"mtime":1615380755820,"results":"95","hashOfConfig":"57"},{"size":16198,"mtime":1619429916595,"results":"96","hashOfConfig":"57"},{"size":6403,"mtime":1619429916596,"results":"97","hashOfConfig":"57"},{"size":2260,"mtime":1615380755779,"results":"98","hashOfConfig":"57"},{"size":1459,"mtime":1615380755824,"results":"99","hashOfConfig":"57"},{"size":14250,"mtime":1619429916593,"results":"100","hashOfConfig":"57"},{"size":13223,"mtime":1619429916592,"results":"101","hashOfConfig":"57"},{"size":4854,"mtime":1615380755782,"results":"102","hashOfConfig":"57"},{"size":2250,"mtime":1615380755789,"results":"103","hashOfConfig":"57"},{"size":8996,"mtime":1619593725759,"results":"104","hashOfConfig":"57"},{"size":10150,"mtime":1619593725757,"results":"105","hashOfConfig":"57"},{"size":2609,"mtime":1615380755781,"results":"106","hashOfConfig":"57"},{"size":8751,"mtime":1619593725762,"results":"107","hashOfConfig":"57"},{"size":325,"mtime":1615380755804,"results":"108","hashOfConfig":"57"},{"size":2141,"mtime":1615380755790,"results":"109","hashOfConfig":"57"},{"size":4792,"mtime":1615380755777,"results":"110","hashOfConfig":"57"},{"size":2773,"mtime":1616166848820,"results":"111","hashOfConfig":"57"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"ba5384",{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"114"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"114"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"114"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"114"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"114"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"114"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"153","usedDeprecatedRules":"114"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"156","usedDeprecatedRules":"114"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"159","usedDeprecatedRules":"114"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":12,"source":"162","usedDeprecatedRules":"114"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"114"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"114"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"114"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"114"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"114"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"114"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"114"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"114"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"114"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"114"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"114"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"114"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"114"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"114"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"114"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"114"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"114"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"114"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"114"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"114"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"114"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"114"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"114"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\index.js",[],["256","257"],"C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\serviceWorker.js",[],"C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\RoutingIndex.js",["258","259","260","261"],"import React from \"react\";\r\nimport {BrowserRouter as Router, Route, useHistory, Switch} from \"react-router-dom\";\r\nimport {RootView} from \"./routes/root/RootView\";\r\nimport PrivateRoute from \"./service/ProtectedRoute\";\r\nimport {LogIn} from \"./routes/user/LogIn\";\r\nimport {getIndicators} from \"./service/backendServices/IndicatorService\";\r\nimport {IndicatorTemplate} from \"./objects/enums/indicatorTemplate\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {replaceIndicators} from \"./redux/actions/indicator_actions\";\r\nimport {checkUser} from \"./service/backendServices/UserService\";\r\n\r\nexport default function RoutingIndex() {\r\n    require(\"dotenv\").config()\r\n    const dispatch = useDispatch();\r\n\r\n    //GET INDICATORS FROM SERVER\r\n    getIndicators().then((indicators: IndicatorTemplate[]) => {\r\n        dispatch(replaceIndicators(indicators))\r\n    })\r\n\r\n    return <>\r\n        <Router>\r\n            <Switch>\r\n                <Route path={\"/\"}><RootView/></Route>\r\n            </Switch>\r\n        </Router>\r\n    </>\r\n}\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\themes\\theme.js",[],"C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\service\\SnackbarProvider.jsx",["262"],"import React, {useEffect, useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport {Alert} from '@material-ui/lab';\r\nimport {connect} from \"react-redux\";\r\nimport {getLoadingStatus} from \"../redux/selectors/selectors\";\r\nimport {LoadingStatus} from \"../objects/enums/loading.enum\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    snackbarRoot: {},\r\n}));\r\nconst SnackbarProvider = ({loading}) => {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n    const [oldStatus, setOldStatus] = useState();\r\n\r\n    useEffect(() => {\r\n        if(loading.status !== LoadingStatus.loading && oldStatus !== loading.status){\r\n            setOpen(true);\r\n        }\r\n        setOldStatus(loading.status);\r\n    }, [loading])\r\n\r\n    return <div className={classes.snackbarRoot}>\r\n        <Snackbar transitionDuration={500} onClose={setOpen} anchorOrigin={{vertical: \"bottom\", horizontal: \"right\"}} open={open} autoHideDuration={7000}>\r\n            {loading.status === LoadingStatus.error ? <Alert severity=\"error\">Deine Projekte konnten nicht von der Datenbank geladen werden... Bist du offline?</Alert> :  <Alert style={{}} severity=\"success\">Deine Projekte wurden von der Datenbank geladen.</Alert>}\r\n        </Snackbar>\r\n    </div>\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {loading: getLoadingStatus(state)}\r\n}\r\nexport default connect(mapStateToProps)(SnackbarProvider)\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\dialogs\\CustomAlertTemplate.jsx",[],"C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\redux\\reducers\\index.js",[],"C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\service\\backendServices\\IndicatorService.js",[],"C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\redux\\actions\\indicator_actions.js",[],"C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\service\\backendServices\\UserService.js",[],"C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\objects\\enums\\indicatorTemplate.js",[],"C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\service\\ProtectedRoute.jsx",["263","264"],"import {Route, Redirect, useHistory} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {checkUser} from \"./backendServices/UserService\";\r\n\r\nfunction PrivateRoute({user, children, ...rest}){\r\n    const history = useHistory();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={({location}) =>\r\n                user.loggedIn ? (children) : (<Redirect to={{pathname: \"/login\"}}/>)\r\n            }\r\n        />\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    const {user} = state;\r\n    return {user};\r\n}\r\nexport default connect(mapStateToProps)(PrivateRoute)\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\objects\\enums\\loading.enum.js",[],"C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\redux\\selectors\\selectors.js",["265","266"],"import {LoadingStatus} from \"../../objects/enums/loading.enum\";\r\nimport {Basechart, Project} from \"../../objects/project\";\r\nimport {Status} from \"../../objects/enums/status.enum\";\r\nconst _ = require(\"lodash\")\r\n\r\nconst getAllProjects = state => _.omitBy(state.projects, (project) => project.project.userId !== state.user.userId) ?? {};\r\nconst getLatestProjects = (state, count) => {\r\n    const projects = _.values(getAllProjects(state)).sort((p1, p2) => p1.project.status - p2.project.status)\r\n    return _.slice(projects, 0, count)\r\n}\r\nconst getProjectById = (state, id) => {\r\n    console.log(\"Get projects by id: \", state)\r\n    if (state == null) {\r\n        return;\r\n    }\r\n    return state[id];\r\n}\r\nconst getStatusForProject = (state, projectId) => {\r\n\r\n    return state.projects[projectId].project.status;\r\n}\r\nconst getLoadingStatus = (state) => {\r\n    if(state.loading.error){\r\n        return {status: LoadingStatus.error, error: state.loading.error};\r\n    }else{\r\n        return {status: state.loading.loading ? LoadingStatus.loading : LoadingStatus.loaded, error: \"\"}\r\n    }\r\n}\r\nconst hasIndicator = (project: Project, basechartId: String) => {\r\n    if(!project.indicator){\r\n        return false\r\n    }\r\n    return project.indicator.some(value => {\r\n        return value.basechart._id === basechartId\r\n    });\r\n}\r\nconst getUserId = (state) => state.user.userId;\r\nexport {getAllProjects, getProjectById, getLoadingStatus, hasIndicator, getLatestProjects, getUserId, getStatusForProject};\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\routes\\user\\LogIn.jsx",["267","268","269","270","271","272"],"import React, {useRef, useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {Button, Typography} from \"@material-ui/core\";\r\nimport {TextField_Component} from \"../../components/inputs/TextField_Component\";\r\nimport {signInUser, signUpUser} from \"../../service/backendServices/BackendService\";\r\nimport {useHistory} from \"react-router-dom\";\r\nconst useStyles = makeStyles((theme) => ({\r\n    loginRoot: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        backgroundColor: theme.palette.background.default\r\n    },\r\n    splash: {\r\n        width: \"60%\",\r\n        height: \"100vh\",\r\n        overflow: \"hidden\",\r\n        flexShrink: 1,\r\n        backgroundColor: theme.palette.primary.main\r\n    },\r\n    leftSideContainer: {\r\n        marginTop: \"auto\",\r\n        flexGrow: 1,\r\n        padding: 80,\r\n        marginBottom: \"auto\",\r\n    },\r\n    signInButton: {\r\n        height: 50,\r\n        marginTop: 60,\r\n    },\r\n    bottomText: {\r\n        paddingTop: 20,\r\n        color: theme.palette.text.hint,\r\n        textAlign: \"center\",\r\n        width: \"100%\"\r\n    }\r\n}));\r\nexport const LogIn = () => {\r\n    //mark: hooks\r\n    const classes = useStyles();\r\n    const usernameReference = useRef();\r\n    const passwordReference = useRef();\r\n    const confirmReference = useRef();\r\n    const history = useHistory();\r\n\r\n    //mark: states\r\n    const [isLogin, setIsLogin] = useState(true);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(\"\");\r\n\r\n\r\n    //<editor-fold desc=\"helpers\">\r\n    function mainButtonAction() {\r\n        setLoading(true)\r\n        setError(\"\");\r\n        if (!isLogin) {\r\n            if (passwordReference.current.value !== confirmReference.current.value) {\r\n                setError(\"Passwörter stimmen nicht überein!\")\r\n                setLoading(false);\r\n                return;\r\n            }\r\n            signUpUser(usernameReference.current.value, passwordReference.current.value).then(() => {\r\n                setLoading(false)\r\n                console.log(\"Sucessfully created user! Redirecting...\")\r\n                history.push(\"/dashboard\")\r\n            }).catch((e) => {\r\n                setLoading(false);\r\n                setError(JSON.parse(e).message)\r\n            })\r\n        } else {\r\n            signInUser(usernameReference.current.value, passwordReference.current.value).then(() => {\r\n                console.log(\"Successfully logged in!\");\r\n                history.push(\"/dashboard\");\r\n            }).catch((e) => {\r\n                setLoading(false);\r\n                setError(JSON.parse(e).message)\r\n            })\r\n        }\r\n    }\r\n\r\n    function bottomTextAction() {\r\n        setIsLogin(!isLogin)\r\n    }\r\n\r\n    //</editor-fold>\r\n\r\n    //mark: render\r\n    return <div className={classes.loginRoot}>\r\n        <div className={classes.leftSideContainer}>\r\n            <Typography variant={\"h1\"}>{isLogin ? \"Sign in.\" : \"Sign up.\"}</Typography>\r\n            <Typography variant={\"caption\"}>Wir brauchen ein paar Daten von dir um einen Account erstellen zu\r\n                können. </Typography>\r\n            <div style={{marginTop: \"80px\"}}/>\r\n            <TextField_Component ref={usernameReference} disabled={loading} placeholder={\"max.mustermann@gmail.com\"}\r\n                                 type={\"text\"}/>\r\n            <TextField_Component ref={passwordReference} disabled={loading} placeholder={\"Passwort...\"}\r\n                                 type={\"password\"}/>\r\n            {!isLogin ?\r\n                <TextField_Component ref={confirmReference} disabled={loading} placeholder={\"Passwort bestätigen...\"}\r\n                                     type={\"password\"}/> : <div/>}\r\n            <Typography variant={\"body1\"} color={\"error\"}>{error}</Typography>\r\n            <Button onClick={mainButtonAction} fullWidth className={classes.signInButton} disabled={loading}\r\n                    variant={\"contained\"}\r\n                    color={\"primary\"}>{loading ? \"Loading...\" : isLogin ? \"Anmelden\" : \"Account erstellen\"}</Button>\r\n            <div className={classes.bottomText}>\r\n                {isLogin ?\r\n                    <div>Du hast noch keinen Account? <a style={{cursor: \"pointer\", textDecoration: \"underline\"}}\r\n                                                         onClick={bottomTextAction}>Hier erstellen.</a></div>\r\n                    :\r\n                    <div>Du hast schon einen Account? <a style={{cursor: \"pointer\", textDecoration: \"underline\"}}\r\n                                                         onClick={bottomTextAction}>Hier anmelden.</a></div>\r\n                }\r\n\r\n            </div>\r\n        </div>\r\n        <div className={classes.splash}>\r\n            <img style={{objectFit: \"scale-down\", width: \"100%\", height: \"100%\"}} src={process.env.PUBLIC_URL + 'assets/LogInSplash.svg'}\r\n                 alt={\"Splash Image\"}/>\r\n        </div>\r\n    </div>\r\n}\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\routes\\root\\RootView.jsx",["273","274","275"],"import React, {useEffect} from \"react\";\r\nimport SideNavigationBar_Component from \"../../components/miscellaneous/SideNavigationBar_Component\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {useTheme} from \"@material-ui/styles\"\r\nimport {Redirect, Route, Switch, useHistory, useLocation} from \"react-router-dom\";\r\nimport History from \"./History\";\r\nimport ProjectSettings from \"../project/ProjectSettings\";\r\nimport {ArrowBackIosRounded} from \"@material-ui/icons\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Dashboard from \"./Dashboard\";\r\nimport {getProjects} from \"../../service/backendServices/BackendService\";\r\nimport {Settings} from \"./Settings\";\r\nimport DetailView from \"../project/DetailView\";\r\nimport {startStatusPolling} from \"../../service/backendServices/Poller\";\r\nimport {FinishedProjectView} from \"../project/FinishedProjectView\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {logIn} from \"../../redux/actions/user_actions\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    containerRoot: {\r\n        paddingLeft: 40,\r\n        paddingTop: 40,\r\n        overflow: \"auto\",\r\n        width: \"calc(100vw - 40px)\",\r\n        height: \"calc(100vh - 40px)\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        background: theme.palette.background.default\r\n\r\n    }, contentContainer: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        borderRadius: \"10px 0 0 0\",\r\n        flexGrow: 1,\r\n        width: \"calc(100% - 40px - 212.8px)\",\r\n        height: \"100%\",\r\n        overflow: \"scroll\",\r\n    }, navigation: {\r\n        //transition wont work because the whole route changes and redraws everything,\r\n        //could be fixed if the route is moved down the widget tree only rerendering\r\n        //the container; but then the navigation component has to be notified of the change\r\n        //wich is kind of dumb, so we will keep it this way\r\n\r\n        //transition: \"width 1s ease\"\r\n    }, topBar: {\r\n        width: \"100%\",\r\n        minHeight: 100,\r\n    },\r\n    mainContent: {\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"stretch\",\r\n        overflow: \"hidden\"\r\n    }\r\n}));\r\nexport const RootView = () => {\r\n    //mark: hooks\r\n    const theme = useTheme();\r\n    const classes = useStyles();\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    //mark: variables\r\n    const _ = require(\"lodash\")\r\n    const hideNav = _.includes(location.pathname, \"project\") || _.includes(location.pathname, \"detail\")\r\n\r\n\r\n    //<editor-fold desc=\"lifecycle\">\r\n    useEffect(() => {\r\n        dispatch(logIn(\"0\", \"Default User\"))\r\n        getProjects();\r\n    }, [])\r\n    //</editor-fold>\r\n\r\n    //mark: render\r\n    return <div className={classes.containerRoot}>\r\n        <div className={classes.topBar}>\r\n            <Typography variant={\"h1\"}>Stock <span\r\n                style={{color: theme.palette.primary.main}}>Analysis</span></Typography>\r\n        </div>\r\n        <div className={classes.mainContent}>\r\n            <div className={classes.navigation} style={hideNav ? {width: \"0px\", overflow: \"hidden\",} : {}}>\r\n                <SideNavigationBar_Component showNavigationBar={hideNav}/>\r\n            </div>\r\n            <div className={classes.contentContainer}>\r\n                {hideNav ? <IconButton onClick={() => {\r\n                    if (history.length < 1) {\r\n                        history.goBack()\r\n                    } else {\r\n                        history.replace(\"/dashboard\")\r\n                    }\r\n                }}><ArrowBackIosRounded/></IconButton> : <></>}\r\n                <Switch>\r\n                    <Route path={\"/dashboard\"}>\r\n                        <Dashboard/>\r\n                    </Route>\r\n                    <Route path={\"/history\"}>\r\n                        <History/>\r\n                    </Route>\r\n                    <Route path={\"/settings\"}>\r\n                        <Settings/>\r\n                    </Route>\r\n                    <Route path={\"/project/:id\"}><ProjectSettings/></Route>\r\n                    <Route path={\"/detail/:id\"}><DetailView/></Route>\r\n                    <Route path={\"/finished/:id\"}><FinishedProjectView/></Route>\r\n                    <Route path={\"/\"} exact><Redirect to=\"/dashboard\"/></Route>\r\n                    <Route path={\"*\"}><Redirect to=\"/dashboard\"/></Route>\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    </div>\r\n};\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\redux\\reducers\\user_reducer.js",["276","277"],"// @flow\r\nimport {createReducer} from \"@reduxjs/toolkit\";\r\n\r\nexport const user_reducer = createReducer({loggedIn: false, timestamp: null, userId: null, mail: null}, {\r\n     [\"LOG_IN\"]: (state, action) => {\r\n         return {loggedIn: true, timestamp: Date.now(), userId: action.payload.userId, mail: action.payload.mail}\r\n     },\r\n     [\"LOG_OUT\"]: () => {\r\n         return {loggedIn: false, timestamp: null, userId: null, mail: null};\r\n     }\r\n});\r\n\r\n\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\redux\\reducers\\databaseLoading_reducer.js",["278","279","280"],"// @flow\r\nimport {createReducer} from \"@reduxjs/toolkit\";\r\n\r\nexport const databaseLoading_reducer = createReducer({loading: true}, {\r\n    [\"LOADING\"]: () => {\r\n        return {loading: true}\r\n    },\r\n    [\"LOADED\"]: () => {\r\n        return {loading: false}\r\n    },\r\n    [\"ERROR\"]: (state, action) => {\r\n        return {\r\n            loading: false,\r\n            error: action.payload.reason\r\n        }\r\n    }\r\n});\r\n\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\redux\\reducers\\indicators_reducer.js",["281","282","283","284","285","286"],"import {createReducer} from \"@reduxjs/toolkit\";\r\nimport {Basechart, Indicator, Project} from \"../../objects/project\";\r\nimport {Status} from \"../../objects/enums/status.enum\";\r\n\r\nconst _ = require(\"lodash\");\r\n\r\nexport const indicatorReducer = createReducer([], {\r\n    [\"ADD_NEW_INDICATOR_TEMPLATE\"] : (state, action) => {\r\n        const {indicators} = action.payload;\r\n        return indicators;\r\n    }\r\n});\r\n\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\redux\\reducers\\projects_reducer.js",["287","288","289","290","291","292","293","294","295","296","297","298"],"import {createReducer} from \"@reduxjs/toolkit\";\r\nimport {Basechart, Indicator, Project} from \"../../objects/project\";\r\nimport {Status} from \"../../objects/enums/status.enum\";\r\n\r\nconst _ = require(\"lodash\");\r\n\r\nexport const projectsReducer = createReducer(null, {\r\n    [\"CREATE\"]: (state, action) => {\r\n        const projectId: string = action.payload.projectId;\r\n        const userId: string = action.payload.userId;\r\n\r\n        let project = new Project();\r\n        project.creationTimestamp = new Date();\r\n        project.status = Status.draft;\r\n        project.projectId = projectId;\r\n        project.userId = userId; \r\n        const draftNumber = Object.values(state ?? []).filter((p) => p.projectTitle !== \"New Draft\").length + 1\r\n        project.projectTitle = \"New Draft \" + draftNumber;\r\n        return {\r\n            ...state,\r\n            [projectId]: {\r\n                project: project,\r\n                created: new Date().toISOString(),\r\n            }\r\n        }\r\n    },\r\n    [\"MODIFY\"]: (state, action) => {\r\n        const projectId: string = action.payload.projectId;\r\n        const rowToModify: string = action.payload.rowToModify;\r\n        const data: any = action.payload.data;\r\n        if (rowToModify == null || projectId == null || data == null) {\r\n            return state;\r\n        }\r\n        return {\r\n            ...state,\r\n            [projectId]: {\r\n                project: Object.assign({}, state[projectId].project, {[rowToModify]: data}),\r\n                modified: new Date().toISOString()\r\n            }\r\n        };\r\n    },\r\n    [\"REMOVE\"]: (state, action) => {\r\n        const {projectId} = action.payload;\r\n        let projects = _.cloneDeep(state);\r\n        projects = _.omit(projects, [projectId]);\r\n        return {\r\n            ...projects\r\n        }\r\n    },\r\n    [\"DATABASE_ADD\"]: (state, action) => {\r\n        const projects = {\r\n            ...state,\r\n            ...action.payload.projects\r\n        }\r\n        return _.omitBy(projects, (v, k) => v.projectTitle)\r\n    },\r\n    [\"REMOVE_BASECHART\"]: (state, action) => {\r\n        const {projectId, basechartId} = action.payload;\r\n        const project = _.cloneDeep(state[projectId].project);\r\n        const basecharts = project.basecharts;\r\n        _.remove(basecharts, (basechart: Basechart) => basechart._id === basechartId);\r\n        return {\r\n            ...state,\r\n            [projectId]: {\r\n                project: project,\r\n                modified: new Date().toISOString()\r\n            }\r\n        }\r\n\r\n    },\r\n    [\"ADD_BASECHART\"]: (state, action) => {\r\n        let {project, basechart} = action.payload;\r\n        project = _.cloneDeep(state[project.projectId].project);\r\n        return {\r\n            ...state,\r\n            [project.projectId]: {\r\n                project: Object.assign({}, project, {\"basecharts\": [...project.basecharts ?? [], basechart]}),\r\n                modified: new Date().toISOString()\r\n            }\r\n        }\r\n    },\r\n    [\"MODIFY_BASECHART\"]: (state, action) => {\r\n        let {project, basechart, column, newValue} = action.payload;\r\n        basechart = Object.assign({}, basechart);\r\n        let basecharts = Array.from(project.basecharts);\r\n        if (column === \"chartname\") {\r\n            basechart.chartname = newValue;\r\n        } else if (column === \"columns\") {\r\n            basechart.columns = newValue;\r\n        } else if (column === \"nickname\") {\r\n            basechart.nickname = newValue;\r\n        }\r\n        const basechartIndex = project.basecharts.findIndex(value => value._id === basechart._id);\r\n        basecharts[basechartIndex] = basechart;\r\n        return {\r\n            ...state,\r\n            [project.projectId]: {\r\n                project: Object.assign({}, project, {\"basecharts\": basecharts}),\r\n                modified: new Date().toISOString()\r\n            }\r\n        }\r\n    },\r\n    [\"ADD_INDICATOR\"]: (state, action) => {\r\n        const {indicator, projectId} = action.payload;\r\n\r\n        const projectContainer = Object.assign({}, state[projectId].project);\r\n        const indicators = Array.from(projectContainer.indicator ?? []);\r\n        indicators.length === 0 ? indicator._id = 1 : indicator._id = (_.last(indicators)._id) + 1;\r\n        indicators.push(indicator);\r\n        projectContainer.indicator = indicators;\r\n        return {\r\n            ...state,\r\n            [projectId]: {project: projectContainer, modified: new Date().toISOString()}\r\n        }\r\n    },\r\n    [\"REMOVE_INDICATOR\"]: (state, action) => {\r\n        const {indicatorId, projectId} = action.payload;\r\n        const projectContainer = Object.assign({}, state[projectId].project);\r\n        const indicators = Array.from(projectContainer.indicator ?? []);\r\n        _.remove(indicators, (i: Indicator) => i._id === indicatorId)\r\n        projectContainer.indicator = indicators;\r\n        return {\r\n            ...state,\r\n            [projectId]: {project: projectContainer, modified: new Date().toISOString()}\r\n        }\r\n    },\r\n    [\"MODIFY_INDICATOR\"]: (state, action) => {\r\n        const {indicator, projectId} = action.payload;\r\n        const projectContainer = {...state[projectId].project};\r\n        const indicators = Array.from(projectContainer.indicator ?? []);\r\n        const indicatorIndex = _.findIndex(indicators, (i: Indicator) => i._id === indicator._id);\r\n        indicators[indicatorIndex] = indicator;\r\n        projectContainer.indicator = indicators;\r\n        return {\r\n            ...state,\r\n            [projectId]: {project: projectContainer, modified: new Date().toISOString()}\r\n        };\r\n    },\r\n    [\"REMOVE_DRAFTS\"]: (state, action) => {\r\n        var stateCopy = Object.assign({}, state);\r\n        _.omitBy(stateCopy, ((project: Project, key: String) => project.state = Status.draft))\r\n        const newState = Object.assign({}, stateCopy);\r\n        return {\r\n            ...newState\r\n        }\r\n    },\r\n    [\"UPDATE_STATUS\"]: (state, action) => {\r\n        const {projectId, status, statusText} = action.payload;\r\n        return {\r\n            ...state,\r\n            [projectId]: {\r\n                project: Object.assign({}, state[projectId].project, {status: status, statusText: statusText}),\r\n                modified: new Date().toISOString()\r\n            },\r\n\r\n        }\r\n    }\r\n});\r\n\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\redux\\localStorage.js",[],"C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\settings.js",[],"C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\objects\\project.js",["299","300"],"// @flow\r\nimport {Status} from \"./enums/status.enum\";\r\n\r\n//Flow classes for structuring\r\n\r\nexport class Project {\r\n    creationTimestamp: Date;\r\n    projectId: string;\r\n    projectTitle: string;\r\n    status: Status;\r\n    statusText: string;\r\n    timeunit: \"M\" | \"W\" | \"D\" | \"h\" | \"m\" | \"s\" | \"ms\";\r\n    runtime: string;\r\n    correlation: number;\r\n    error: string;\r\n    zieldatensatz: string;\r\n    basecharts: Array<Basechart>;\r\n    indicator: Array<Indicator>;\r\n    rules: Array<mixed>;\r\n    options: Array<mixed>;\r\n    userId: String;\r\n}\r\n\r\nexport class Basechart {\r\n    _id: string;\r\n    chartname: string;\r\n    nickname: string;\r\n    columns: string[];\r\n    grouped: boolean;\r\n    filepath: string;\r\n    editable: boolean;\r\n    uploadProgress: number;\r\n}\r\nexport class Indicator {\r\n    _id: number;\r\n    definition: string;\r\n    combinations: number;\r\n    basechart: Basechart;\r\n    column: string;\r\n    status: Status;\r\n    paths: string[];\r\n\r\n\r\n    constructor(definition: string, combinations: number, basechart: Basechart, status: Status) {\r\n        this.definition = definition;\r\n        this.combinations = combinations;\r\n        this.basechart = basechart;\r\n        this.status = status;\r\n    }\r\n}\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\objects\\enums\\status.enum.js",[],"C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\redux\\actions\\user_actions.js",[],"C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\service\\backendServices\\BackendService.js",["301","302"],"import {store} from \"../../redux/reducers\";\r\nimport {error, loaded} from \"../../redux/actions/loading_actions\";\r\nimport {createNewProject, getAllProjects, getSingleProject} from \"./ProjectService\";\r\nimport {parseJSONToProject} from \"./JSONParser\";\r\nimport {addDatabaseProjects} from \"../../redux/actions/project_actions\";\r\nimport {signIn, signUp} from \"./UserService\";\r\nimport {logIn, logOut} from \"../../redux/actions/user_actions\";\r\nimport {Project} from \"../../objects/project\";\r\nimport {startStatusPolling} from \"./Poller\";\r\n\r\nconst _ = require(\"lodash\")\r\nconst wait = ms => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nexport const getProjects = () => {\r\n    return getAllProjects().then(contents => {\r\n        let jsonContent = JSON.parse(contents);\r\n        if(jsonContent.status >= 400){\r\n            return Promise.reject(jsonContent);\r\n        }\r\n        let projects = {};\r\n        jsonContent.forEach(x => {\r\n            let project = parseJSONToProject(x);\r\n            projects = {\r\n                ...projects,\r\n                [project.projectId]: {\r\n                    project: project,\r\n                    created: new Date().toISOString(),\r\n                }\r\n            }\r\n        });\r\n        console.log(\"Start polling\")\r\n        startStatusPolling(_.values(projects).map(p => p.project));\r\n        store.dispatch(loaded());\r\n        store.dispatch(addDatabaseProjects(projects))\r\n        return Promise.resolve(_.values(projects).map(x => x.project));\r\n    }).catch(reason => {\r\n        store.dispatch(error(reason.message));\r\n        return Promise.reject(reason);\r\n\r\n    })\r\n}\r\n\r\nexport const createProject = (project: Project) => {\r\n    return createNewProject(project)\r\n}\r\n\r\nexport const getProject = (projectId) => {\r\n    return getSingleProject(projectId).then(contents => {\r\n        console.log(\"Response: \", contents);\r\n        let project = parseJSONToProject(JSON.parse(contents));\r\n        let p = {\r\n            [project.projectId]: {\r\n                project: project,\r\n                created: new Date().toISOString(),\r\n            }\r\n        }\r\n        if(!p[project.projectId].project.projectTitle){\r\n            return;\r\n        }\r\n        store.dispatch(loaded());\r\n        store.dispatch(addDatabaseProjects(p))\r\n    }).catch(e => {\r\n        console.error(\"Cought error:\", e);\r\n        store.dispatch(error(e.message))\r\n    })\r\n}\r\n\r\nexport const signUpUser = (username, password) => {\r\n    return new Promise((resolve, reject) => {\r\n        signUp(username, password).then((response: Response) => {\r\n            if (response.ok) {\r\n                console.log(\"Response is ok!\")\r\n                response.text().then(content => {\r\n                    store.dispatch(logIn(JSON.parse(content).id), username);\r\n                    resolve();\r\n                }).catch((e) => {\r\n                    console.error(e);\r\n                    reject();\r\n                })\r\n            } else {\r\n                reject();\r\n                console.log(\"Response is not ok :( \")\r\n            }\r\n        })\r\n    })\r\n\r\n}\r\n\r\nexport const signInUser = (username, password) => {\r\n    return new Promise((resolve, reject) => {\r\n        signIn(username, password).then((response: Response) => {\r\n            if (response.ok) {\r\n                console.log(\"Response is ok!\");\r\n                response.text().then(content => {\r\n                    resolve();\r\n                    console.log(\"Signing in with: \", username)\r\n                    store.dispatch(logIn(JSON.parse(content).id), username)\r\n                }).catch((e) => {\r\n                    console.error(e);\r\n                    reject(e);\r\n                })\r\n            } else {\r\n                console.log(\"Response is not ok!\");\r\n                response.text().then((e) =>\r\n                    reject(e)\r\n                )\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nexport const signOutUser = () => {\r\n    store.dispatch(logOut())\r\n}\r\n\r\n\r\n\r\nfunction updateProjects(contents) {\r\n\r\n}\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\service\\backendServices\\Poller.js",["303","304"],"import {BACKEND_URL} from \"../../settings\";\r\nimport Axios from \"axios\";\r\nimport {updateProjectStatus} from \"../../redux/actions/project_actions\";\r\nimport {Project} from \"../../objects/project\";\r\nimport {Status} from \"../../objects/enums/status.enum\";\r\nimport {getStatusFromString} from \"./JSONParser\";\r\nimport {store} from \"../../redux/reducers\";\r\nconst _ = require(\"lodash\");\r\n\r\nvar interval;\r\nexport const startStatusPolling = (projects: Project[]) => {\r\n    console.log(\"Start polling with projects: \", projects);\r\n    projects.forEach(value => pollProjectStatus(value.projectId))\r\n    if(interval) clearInterval(interval);\r\n    interval = setInterval(() => {\r\n        const p = projects.filter(v => v.status === Status.waiting);\r\n        p.forEach(value => pollProjectStatus(value.projectId))\r\n    }, 3000)\r\n}\r\n\r\nexport async function pollProjectStatus(projectId){\r\n    const state = store.getState();\r\n    var data = '';\r\n    var config = {\r\n        method: 'get',\r\n        url: BACKEND_URL + `/project/${projectId}/status`,\r\n    };\r\n    Axios.request(config).then(async response => {\r\n        const status = getStatusFromString(response.data.status)\r\n        const statusString = response.data.statusText;\r\n        const prevProject = state.projects[projectId]\r\n\r\n        if(!prevProject){\r\n            store.dispatch(updateProjectStatus(status, response.data.statusText, projectId));\r\n            return;\r\n        }\r\n        if(prevProject.project.status !== status || prevProject.project.statusText !== statusString){\r\n            store.dispatch(updateProjectStatus(status, response.data.statusText, projectId));\r\n        }\r\n    }).catch(async error => {\r\n        console.log(error);\r\n    })\r\n\r\n}\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\routes\\root\\History.jsx",["305","306"],"import React from \"react\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {HistoryCell_Component} from \"../../components/cells/HistoryCell_Component\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {connect} from \"react-redux\";\r\nimport {getAllProjects, getLoadingStatus} from \"../../redux/selectors/selectors\";\r\nimport {LoadingStatus} from \"../../objects/enums/loading.enum\";\r\nimport {Project} from \"../../objects/project\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    historyRoot: {padding: \"40px\"},\r\n    divider: {\r\n        margin: 10,\r\n        marginBottom: 40,\r\n    },\r\n}))\r\n\r\n\r\nconst History = ({projects, loading}) => {\r\n    //mark: hooks\r\n    const classes = useStyles();\r\n\r\n    //mark: render\r\n    return <div className={classes.historyRoot}>\r\n\r\n        <Typography variant={\"h1\"}>Letzte Ergebnisse</Typography>\r\n        <Divider className={classes.divider}/>\r\n        {loading.status === LoadingStatus.loading ? [0].map(() => <div>\r\n            <Typography variant={\"body1\"}>Projects are loading from Database... (Drafts are saved offline)</Typography>\r\n            <HistoryCell_Component project={new Project()}/>\r\n        </div>) : <span/>}\r\n        {projects ? Object.values(projects).map((cell) => {\r\n                return <HistoryCell_Component project={cell.project}\r\n                                              duration={cell.project.runtime}/>\r\n            }) : <span/>}\r\n    </div>\r\n}\r\nconst mapStateToProps = state => {\r\n    return {projects: getAllProjects(state), loading: getLoadingStatus(state)};\r\n}\r\nexport default connect(mapStateToProps)(History)\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\routes\\root\\Dashboard.jsx",["307","308","309","310","311","312","313"],"import React from \"react\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {ProjectTab_Component} from \"../../components/cells/ProjectTab_Component\";\r\nimport {CreateProject_Component} from \"../../components/miscellaneous/CreateProject_Component\";\r\nimport {connect} from \"react-redux\";\r\nimport {getAllProjects, getLatestProjects, getLoadingStatus} from \"../../redux/selectors/selectors\";\r\nimport {LoadingStatus} from \"../../objects/enums/loading.enum\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {Paper} from \"@material-ui/core\";\r\nimport {generateUUID} from \"../../service/UUIDService\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    dashboardRoot: {padding: \"40px\"},\r\n    lastStat: {},\r\n    projects: {},\r\n    projectsScrollContainer: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        overflowX: \"scroll\",\r\n        overflowY: \"scroll\",\r\n    },\r\n    topText: {\r\n        marginBottom: 40,\r\n    },\r\n}));\r\nconst Dashboard = ({projects, loading}) => {\r\n    //mark: hooks\r\n    const classes = useStyles();\r\n\r\n\r\n    //<editor-fold desc=\"helpers\">\r\n    function createProjectTabs() {\r\n        const projectList = [];\r\n        if (loading.status === LoadingStatus.loading) {\r\n            projectList.push([<Grid item><ProjectTab_Component key={0} isLoading={true}/></Grid>,\r\n                <Grid item><ProjectTab_Component key={1} isLoading={true}/></Grid>]);\r\n        }\r\n\r\n        for (const {project} of Object.values(projects)) {\r\n            if (project.projectTitle) {\r\n                projectList.push(<Grid item key={project.projectTitle + generateUUID()}>\r\n                    <ProjectTab_Component\r\n                        key={project.projectTitle + generateUUID()}\r\n                        project={project}\r\n                    /></Grid>);\r\n            }\r\n\r\n        }\r\n\r\n        return projectList;\r\n    }\r\n\r\n    //</editor-fold>\r\n\r\n    //mark: render\r\n    return <div className={classes.dashboardRoot}>\r\n        {/*<div className={classes.lastStat}>\r\n            <Typography variant={\"subtitle2\"}>Letztes Ergebnis</Typography>\r\n            <Chart_Component data={chartData} isLoading={loading.status === LoadingStatus.loading}/>\r\n        </div>*/}\r\n        <div className={classes.projects}>\r\n            <Typography variant={\"h1\"} className={classes.topText}>Projects</Typography>\r\n\r\n            <Grid container spacing={0} direction={\"row\"} wrap={\"wrap\"}>\r\n                {createProjectTabs()}\r\n                <Grid item>\r\n                    <CreateProject_Component/>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    </div>\r\n}\r\nconst mapStateToProps = state => {\r\n    return {projects: getLatestProjects(state, 3), loading: getLoadingStatus(state)};\r\n}\r\nexport default connect(mapStateToProps)(Dashboard)\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\routes\\root\\Settings.jsx",["314","315","316"],"import React, {useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {logOut} from \"../../redux/actions/user_actions\";\r\nimport {useHistory} from 'react-router-dom'\r\nimport {removeAllDrafts, removeBasechart} from \"../../redux/actions/project_actions\";\r\nimport {deleteTempFiles} from \"../../service/backendServices/ProjectService\";\r\nimport {useAlert} from \"react-alert\";\r\nimport {changeStorageLocation} from \"../../service/backendServices/UserService\";\r\nconst electron = window.require(\"electron\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    settingsRoot: {padding: 40},\r\n    divider: {\r\n        margin: 10,\r\n        marginBottom: 40,\r\n    },\r\n    subtitle: {\r\n        color: theme.palette.text.primary,\r\n        marginBottom: 20,\r\n    },\r\n    deleteButton: {\r\n        marginTop: 40,\r\n        borderColor: theme.palette.error.main,\r\n        backgroundColor: theme.palette.error.main,\r\n        opacity: 1.0,\r\n        color: \"white\",\r\n        borderRadius: 10,\r\n        borderWidth: 2,\r\n        borderStyle: \"solid\",\r\n        fontFamily: \"Biko, sans-serif\",\r\n        outline: \"none\",\r\n        height: 40,\r\n        width: 200,\r\n        background: \"transparent\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        transition: \"all 0.2s ease\",\r\n        alignItems: \"center\",\r\n        \"&:hover\": {\r\n            opacity: 1,\r\n            backgroundColor: theme.palette.error.main,\r\n            boxShadow: \"0 0 10px 2px \" + theme.palette.error.main,\r\n            color: \"white\",\r\n        }\r\n    }\r\n}));\r\n\r\n\r\n\r\n\r\nexport const Settings = () => {\r\n    //mark: hooks\r\n    const classes = useStyles();\r\n    const user = useSelector(state => state.user);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const alert = useAlert();\r\n\r\n    //states\r\n    const [speicherOrt, setSpeicherOrt] = useState(\"\");\r\n\r\n\r\n\r\n    //<editor-fold desc=\"helpers\">\r\n    function logoutUser() {\r\n        dispatch(logOut());\r\n        history.go(0);\r\n    }\r\n\r\n    function openDirectoryChooser() {\r\n        let dialog = electron.remote.dialog;\r\n        let path = dialog.showOpenDialogSync({\r\n            properties: ['openDirectory']\r\n        })\r\n        changeStorageLocation(path).then(x => {\r\n            setSpeicherOrt(path)\r\n        }).catch((e) => {\r\n            alert.show(\"Fehler beim ändern des Speicherorts. \" + e, {\r\n                title: \"Fehler!\",\r\n                closeCopy: \"Okay :(\",\r\n                actions: []\r\n            })\r\n        })\r\n    }\r\n\r\n    function deleteTempFolder(){\r\n        alert.show(\"Bist du sicher das du alle deine Drafts löschen möchtest?\", {\r\n            title: \"Temporäre Files löschen!\",\r\n            closeCopy: \"Abbrechen\",\r\n            actions: [{\r\n                copy: \"Löschen\",\r\n                onClick: () => {\r\n                    dispatch(removeAllDrafts())\r\n                    deleteTempFiles().then(r => alert.show(\"Temporäre Files gelöscht!\"));\r\n                }\r\n            }]\r\n        });\r\n    }\r\n\r\n    //</editor-fold>\r\n\r\n    //mark: render\r\n    return <div className={classes.settingsRoot}>\r\n        <Typography variant={\"h1\"}>Globale Einstellungen</Typography>\r\n        {<p>App Version: {electron.remote.app.getVersion()}</p>}\r\n        <Divider className={classes.divider}/>\r\n        <Typography className={classes.subtitle} variant={\"subtitle2\"}>Temporäre Files</Typography>\r\n        <Typography variant={\"body1\"}>Lösche alle deine Temporäre Files. Deine Draft-Projekte werden dadurch auch gelöscht.</Typography>\r\n        <Button onClick={deleteTempFolder}  className={classes.deleteButton}>Indikatoren löschen.</Button>\r\n        <Divider className={classes.divider}/>\r\n        {/**<Typography variant={\"subtitle2\"} className={classes.subtitle}>Benutzer</Typography>\r\n        <Typography variant={\"body1\"}>Eingeloggter Nutzer: {user.mail ?? \"...\"}</Typography>\r\n        <Typography variant={\"body2\"}>Nutzer-Id: {user.userId}</Typography>\r\n        <Button onClick={logoutUser} className={classes.deleteButton}>Nutzer ausloggen.</Button>\r\n        <Divider className={classes.divider}/>**/}\r\n        <Typography variant={\"subtitle2\"} className={classes.subtitle}>Speicherort</Typography>\r\n        <Typography variant={\"body1\"}>Speicherort: {speicherOrt}</Typography>\r\n        <Typography variant={\"body2\"}>Wähle bitte einen leeren Ordner aus!</Typography>\r\n        <Button className={classes.deleteButton} onClick={openDirectoryChooser}>Ordner auswählen</Button>\r\n    </div>\r\n}\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\routes\\project\\ProjectSettings.jsx",["317","318","319","320","321","322","323"],"import React, {useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {SettingsCell_Component} from \"../../components/cells/SettingsCell_Component\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport BaseSettings_Component from \"../../components/settingsCollections/BaseSettings_Component\";\r\nimport {IndicatorSettings_Component} from \"../../components/settingsCollections/IndicatorSettings_Component\";\r\nimport {getLoadingStatus} from \"../../redux/selectors/selectors\";\r\nimport {connect, useDispatch, useSelector} from \"react-redux\";\r\nimport {Project} from \"../../objects/project\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {LoadingStatus} from \"../../objects/enums/loading.enum\";\r\nimport {createProject, getProjects} from \"../../service/backendServices/BackendService\";\r\nimport {Transition} from \"react-transition-group\";\r\nimport {Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from \"@material-ui/core\";\r\nimport {deleteProject} from \"../../redux/actions/project_actions\";\r\n\r\nconst _ = require(\"lodash\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    projectSettingsRoot: {padding: 20},\r\n    bottomButton: {\r\n        margin: 10,\r\n        height: 60\r\n    }\r\n}));\r\n\r\nconst ProjectSettings = ({loading}) => {\r\n    //MARK: hooks\r\n    const classes = useStyles();\r\n    const {id} = useParams();\r\n    const dispatch = useDispatch();\r\n    const project: Project = useSelector(state => {\r\n        return (state.projects ?? {})[id] ? (state.projects ?? {})[id].project : null\r\n    })\r\n    const history = useHistory();\r\n    //MARK: states\r\n    const [uploading, isUploading] = useState(null);\r\n    const [confirmDialogOpen, setConfirmDialogOpen] = useState(false);\r\n    const [expanded, setExpanded] = useState(\"Basisdaten\");\r\n    const [errors, setErrors] = useState([]);\r\n\r\n    //<editor-fold desc=\"Helpers\">\r\n    function getSubtitleForBasedata() {\r\n        if (!project) {\r\n            return \"Noch keine Basisdaten importiert. \"\r\n        } else {\r\n            if (!project.projectTitle) {\r\n                return \"Noch keine Basisdaten importiert. \"\r\n            } else {\r\n                return `Projekt ${project.projectTitle} erstellt.`;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getSubtitleForIndicators() {\r\n        if(!project.basecharts){\r\n            return \"Zuerst Basisdaten importieren!\"\r\n        }\r\n        if (!project || !project.indicator) {\r\n            return \"Noch keine Indikatoren importiert\"\r\n        }\r\n        if (project.indicator.length === 0) {\r\n            return \"Noch keine Indikatoren importiert. \"\r\n        } else {\r\n            if (project.indicator.length === 1) {\r\n                return \"1 Indikator erstellt.\"\r\n            }\r\n            return `${project.indicator.length} Indikatoren erstellt.`;\r\n        }\r\n\r\n    }\r\n\r\n    function getSubtitleForOptions() {\r\n        if (!project) {\r\n            return \"Standartoptionen werden verwendet.\"\r\n        } else {\r\n            if (!project.options) {\r\n                return \"Standartoptionen werden verwendet.\"\r\n            } else {\r\n                return \"Eigene Optionen werden verwendet.\"\r\n            }\r\n        }\r\n    }\r\n\r\n    function getSubtitleForRules() {\r\n        if (!project) {\r\n            return \"Keine Regeln werden verwendet.\"\r\n        } else {\r\n            if (!project.rules) {\r\n                return \"Keine Regeln werden verwendet.\"\r\n            } else {\r\n                return `${project.rules.length} Regeln werden verwendet.`\r\n            }\r\n        }\r\n    }\r\n\r\n    function drawError() {\r\n        if(loading.status === LoadingStatus.error){\r\n            return <h1>Fehler</h1>\r\n        }else{\r\n            return <></>\r\n        }\r\n    }\r\n\r\n    function handleExpandedChange(title) {\r\n        setExpanded(title);\r\n    }\r\n\r\n    function createProj(){\r\n        isUploading(LoadingStatus.loading);\r\n        //Create a new Project\r\n        createProject(project).then(() => {\r\n            //Delete Draft from local save\r\n            dispatch(deleteProject(project.projectId));\r\n            //Load Project into Store\r\n            getProjects().then(() => {\r\n                //Go to Dashboard with newly loaded Project\r\n                history.push('/dashboard')\r\n            })\r\n        }).catch(() => isUploading(LoadingStatus.error));\r\n    }\r\n\r\n    //Returns true if there are no errors\r\n    function checkForProjectErrors() {\r\n        const errorMessages = [];\r\n        console.log(\"Project check!: \", project)\r\n        if (!project.zieldatensatz || project.zieldatensatz === \"\" || project.zieldatensatz === null) {\r\n            errorMessages.push(\"Du hast noch keinen Zieldatensatz hochgeladen. Bitte tu dies unter: \\\"Basisdaten\\\" \\n\")\r\n        }\r\n        if (!project.basecharts || project.basecharts.length === 0) {\r\n            errorMessages.push(\"Du hast noch keine Basisdaten hochgeladen. Bitte tu dies unter: \\\"Basisdaten\\\" \\n\")\r\n        }\r\n        if (!project.indicator || project.indicator.length === 0) {\r\n            //Should indicators be optional?\r\n            errorMessages.push(\"Du hast noch keine Indikatoren erstellt. Bitte tu dies unter: \\\"Indikatoren\\\" \\n\")\r\n        }\r\n        setErrors(errorMessages);\r\n        return errorMessages.length === 0\r\n    }\r\n\r\n    //</editor-fold>\r\n\r\n\r\n    //<editor-fold desc=\"render helpers\">\r\n    function renderErrorDialog() {\r\n        return <Dialog open={errors.length !== 0}><DialogTitle\r\n            id=\"alert-dialog-slide-title\">{\"Dein Projekt hat folgende Fehler:\"}</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText>\r\n                    <ul>\r\n                        {errors.map(x => <li>{x}</li>)}\r\n                    </ul>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => setErrors([])} color=\"primary\">\r\n                    Ups...\r\n                </Button>\r\n            </DialogActions></Dialog>\r\n    }\r\n\r\n    function renderDialog() {\r\n        function renderConfirmation() {\r\n            return <div><DialogTitle id=\"alert-dialog-slide-title\">{\"Projekt hochladen?\"}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Wenn du das Projekt hochlädst wird versucht ein Neurales Netz mit deinen Daten zu trainieren. Du\r\n                        kannst also dein Projekt nicht mehr bearbeiten.\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={createProj} color=\"primary\">\r\n                        Los gehts!\r\n                    </Button>\r\n                    <Button onClick={() => setConfirmDialogOpen(false)} color=\"secondary\">\r\n                        Noch nicht.\r\n                    </Button>\r\n                </DialogActions></div>\r\n        }\r\n\r\n        function renderUploading(){\r\n            return <div><DialogTitle id=\"alert-dialog-slide-title\">{uploading === LoadingStatus.loading ? \"Projekt wird hochgeladen...\" : \"Projekt konnte nicht hochgeladen werden...\"}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {uploading === LoadingStatus.loading ? \"Dein Projekt wird gerade hochgeladen. Du wirst danach zurück aufs Dashboard gelangen.\" : \"Projekt konnte nicht hochgeladen werden...\"}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                {uploading === LoadingStatus.error ? <DialogActions>\r\n                    <Button onClick={() => {\r\n                        isUploading(null);\r\n                        setConfirmDialogOpen(false);\r\n                    }} color=\"secondary\">\r\n                        Abbrechen\r\n                    </Button>\r\n                    <Button onClick={() => {\r\n                        createProj();\r\n                        isUploading(LoadingStatus.loading)\r\n                    }} color=\"primary\">\r\n                        Versuchs noch einmal!\r\n                    </Button>\r\n                </DialogActions>: null}</div>\r\n        }\r\n\r\n\r\n        return <Dialog\r\n            open={confirmDialogOpen || uploading}\r\n            TransitionComponent={Transition}\r\n            keepMounted\r\n        >\r\n            {uploading ? renderUploading() : renderConfirmation()}\r\n        </Dialog>;\r\n    }\r\n\r\n    //</editor-fold>\r\n\r\n    //mark: render\r\n    return <>{drawError()}{!project ? <LinearProgress color={\"primary\"}/> :\r\n        <div className={classes.projectSettingsRoot}>\r\n            {renderDialog()}\r\n            {renderErrorDialog()}\r\n            <SettingsCell_Component title={\"Basisdaten\"} subtitle={getSubtitleForBasedata()} disabled={!project}\r\n                                    expandedView={<BaseSettings_Component project={project}/>}\r\n                                    expanded={expanded} handleChange={(title) => handleExpandedChange(title)}\r\n            />\r\n            <SettingsCell_Component title={\"Indikatoren\"} subtitle={getSubtitleForIndicators()}\r\n                                    disabled={!project || !project.basecharts}\r\n                                    expandedView={<IndicatorSettings_Component project={project}/>}\r\n                                    expanded={expanded} handleChange={(title) => handleExpandedChange(title)}\r\n            />\r\n            {/**<SettingsCell_Component title={\"Optionen\"} subtitle={getSubtitleForOptions()} disabled={!project}\r\n                                    expandedView={<h1>Es werden die Standartregeln verwendet. (BETA)</h1>}\r\n                                    expanded={expanded} handleChange={(title) => handleExpandedChange(title)}\r\n            />**/}\r\n            <hr/>\r\n            <Button onClick={() => {\r\n                if (checkForProjectErrors()) {\r\n                    setConfirmDialogOpen(true)\r\n                }\r\n            }} color={\"primary\"} className={classes.bottomButton} variant={\"contained\"}\r\n                    fullWidth>Projekt\r\n                erstellen</Button>\r\n        </div>}\r\n    </>\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {loading: getLoadingStatus(state)}\r\n}\r\nexport default connect(mapStateToProps)(ProjectSettings)\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\inputs\\TextField_Component.jsx",[],"C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\routes\\project\\DetailView.jsx",["324","325","326","327","328","329","330","331","332","333","334"],"import React, {useEffect, useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport {Project} from \"../../objects/project\";\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport {getProject} from \"../../service/backendServices/BackendService\";\r\nimport {LoadingStatus} from \"../../objects/enums/loading.enum\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport {SettingsCell_Component} from \"../../components/cells/SettingsCell_Component\";\r\nimport BaseSettings_Component from \"../../components/settingsCollections/BaseSettings_Component\";\r\nimport {IndicatorSettings_Component} from \"../../components/settingsCollections/IndicatorSettings_Component\";\r\nimport {getLoadingStatus} from \"../../redux/selectors/selectors\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport {ArrowBack} from \"@material-ui/icons\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    detailViewRoot: {padding: 20, overflow: \"scroll\"},\r\n    bottomButton: {\r\n        margin: 10,\r\n        height: 60\r\n    }\r\n}));\r\n\r\nconst DetailView = ({loading}) => {\r\n    //mark: hooks\r\n    const classes = useStyles();\r\n    const {id} = useParams();\r\n    const history = useHistory();\r\n    const project: Project = useSelector(state => {\r\n        return (state.projects ?? {})[id] ? (state.projects ?? {})[id].project : null\r\n    })\r\n    //mark: states\r\n    const [expanded, setExpanded] = useState(\"Basisdaten\");\r\n\r\n\r\n    //<editor-fold desc=\"lifecycle\">\r\n    useEffect(() => {\r\n        console.log(\"Loading full project:\")\r\n        getProject(id);\r\n    }, [])\r\n    //</editor-fold>\r\n\r\n\r\n    //<editor-fold desc=\"helpers\">\r\n    function getSubtitleForBasedata() {\r\n        if (!project) {\r\n            return \"Noch keine Basisdaten importiert. \"\r\n        } else {\r\n            if (!project.projectTitle) {\r\n                return \"Noch keine Basisdaten importiert. \"\r\n            } else {\r\n                return `Projekt ${project.projectTitle} erstellt.`;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getSubtitleForIndicators() {\r\n        console.log(project);\r\n        if (!project || !project.indicator) {\r\n            return \"Noch keine Indikatoren importiert\"\r\n        }\r\n        if (project.indicator.length === 0) {\r\n            return \"Noch keine Indikatoren importiert. \"\r\n        } else {\r\n            if (project.indicator.length === 1) {\r\n                return \"1 Indikator erstellt.\"\r\n            }\r\n            return `${project.indicator.length} Indikatoren erstellt.`;\r\n        }\r\n\r\n    }\r\n\r\n    function getSubtitleForOptions() {\r\n        if (!project) {\r\n            return \"Standartoptionen werden verwendet.\"\r\n        } else {\r\n            if (!project.options) {\r\n                return \"Standartoptionen werden verwendet.\"\r\n            } else {\r\n                return \"Eigene Optionen werden verwendet.\"\r\n            }\r\n        }\r\n    }\r\n\r\n    function getSubtitleForRules() {\r\n        if (!project) {\r\n            return \"Keine Regeln werden verwendet.\"\r\n        } else {\r\n            if (!project.rules) {\r\n                return \"Keine Regeln werden verwendet.\"\r\n            } else {\r\n                return `${project.rules.length} Regeln werden verwendet.`\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleExpandedChange(title) {\r\n        setExpanded(title);\r\n    }\r\n\r\n    //</editor-fold>\r\n\r\n\r\n    //mark: render\r\n    return <>{!project || loading.status === LoadingStatus.loading ?\r\n        <LinearProgress variant={\"query\"} color={\"primary\"}/> :\r\n        <div className={classes.detailViewRoot}>\r\n\r\n            <Typography variant={\"h1\"}>Details: {project.projectTitle}</Typography>\r\n\r\n            <SettingsCell_Component title={\"Basisdaten\"} subtitle={getSubtitleForBasedata()} disabled={!project}\r\n                                    expandedView={<BaseSettings_Component detail={true} project={project}/>}\r\n                                    expanded={expanded} handleChange={(title) => handleExpandedChange(title)}\r\n            />\r\n            <SettingsCell_Component title={\"Indikatoren\"} subtitle={getSubtitleForIndicators()}\r\n                                    disabled={!project || !project.indicator}\r\n                                    expandedView={<IndicatorSettings_Component project={project}/>}\r\n                                    expanded={expanded} handleChange={(title) => handleExpandedChange(title)}\r\n            />\r\n            <SettingsCell_Component title={\"Regeln\"} subtitle={getSubtitleForRules()}\r\n                                    expandedView={<h1>Es werden die Standartregeln verwendet. (BETA)</h1>}\r\n                                    disabled={!project || (project.indicator ?? []).length === 0}\r\n                                    expanded={expanded} handleChange={(title) => handleExpandedChange(title)}\r\n            />\r\n            <SettingsCell_Component title={\"Optionen\"} subtitle={getSubtitleForOptions()} disabled={!project}\r\n                                    expandedView={<h1>Es werden die Standartregeln verwendet. (BETA)</h1>}\r\n                                    expanded={expanded} handleChange={(title) => handleExpandedChange(title)}\r\n            />\r\n        </div>}\r\n    </>\r\n}\r\nconst mapStateToProps = state => {\r\n    return {loading: getLoadingStatus(state)}\r\n}\r\nexport default connect(mapStateToProps)(DetailView)\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\routes\\project\\FinishedProjectView.jsx",["335","336","337"],"import React, {useEffect, useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {CircularProgress, Divider, Paper, Typography} from \"@material-ui/core\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Project} from \"../../objects/project\";\r\nimport {ResponsiveLineCanvas} from \"@nivo/line\";\r\nimport {Skeleton} from \"@material-ui/lab\";\r\nimport {getIndicatorFile} from \"../../service/backendServices/IndicatorService\";\r\n\r\nconst _ = require(\"lodash\")\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    rootContainer: {padding: 20, height: \"100%\", overflow: \"scroll\"},\r\n    graphs: {overflowX: \"scroll\", overflowY: \"hidden\"},\r\n}));\r\n\r\nexport const FinishedProjectView = () => {\r\n    const [data, setData] = useState([]);\r\n\r\n    const classes = useStyles();\r\n    const {id} = useParams();\r\n    const project: Project = useSelector(state => {\r\n        return (state.projects ?? {})[id] ? (state.projects ?? {})[id].project : null\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        if (project.statusText !== null) {\r\n            getIndicatorFile(project.statusText).then(value =>\r\n                transformData(value))\r\n        }\r\n    }, [])\r\n\r\n    const transformData = (dataString) => {\r\n        const Papa = require(\"papaparse\");\r\n        const papaConfig = {\r\n            header: true,\r\n            fastMode: true,\r\n            complete: (result) => {\r\n                console.log(result)\r\n                let resultData = []\r\n                resultData = result.meta.fields.map(field => {\r\n                    return {\r\n                        id: field,\r\n                        data: result.data.filter(x => !_.isNaN(parseFloat(x[field]))).map((x, i) => {\r\n                            return {\r\n                                x: i,\r\n                                y: parseFloat(x[field])\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n                console.log(resultData)\r\n                setData(resultData);\r\n            }\r\n        }\r\n        Papa.parse(dataString, papaConfig);\r\n    }\r\n\r\n    function syncScroll(sender) {\r\n        _.forEach([\"All\", \"original\", \"prediction\", \"difference\"], (f) => {\r\n            document.getElementById(\"scrollContainer\" + f).scrollLeft = sender.target.scrollLeft;\r\n        })\r\n    }\r\n\r\n    function renderGraphic(field) {\r\n        let d = data;\r\n        if (field !== \"All\" && data) {\r\n            d = data.filter(x => x.id === field)\r\n        }\r\n        return <div id={\"scrollContainer\" + field}\r\n                    style={{height: \"30vh\", width: \"100%\", overflowY: \"scroll\", paddingBottom: 100}}\r\n                    onScroll={syncScroll}>\r\n            <div style={{height: \"100%\", width: \"200%\", overflow: \"hidden\"}}>\r\n                {data.length === 0 && <CircularProgress/>}\r\n                {data.length !== 0 && <ResponsiveLineCanvas\r\n                    data={d}\r\n                    margin={{top: 50, right: 50, bottom: 50, left: 150}}\r\n                    lineWidth={6}\r\n                    curve={\"step\"}\r\n                    colors={{scheme: \"red_blue\"}}\r\n                    enableGridX={true}\r\n                    gridXValues={data[0].data.filter(x => x.x % 10 === 0).map(x => x.x)}\r\n                    enableGridY={true}\r\n                    axisLeft={{\r\n                        tickValues: [\r\n                            0, 0.5, 1\r\n                        ],\r\n                        orient: 'left',\r\n                        tickSize: 5,\r\n                        tickPadding: 5,\r\n                        tickRotation: 0,\r\n                        legend: 'wert',\r\n                        legendOffset: -35,\r\n                        legendPosition: 'middle'\r\n                    }}\r\n                    useMesh={true}\r\n                    pointSize={10}\r\n                    pointColor={\"transparent\"}\r\n                    axisBottom={{\r\n                        tickValues: data[0].data.filter(x => x.x % 10 === 0).map(x => x.x),\r\n                        tickSize: 5,\r\n                        tickPadding: 5,\r\n                        tickRotation: 90,\r\n                        legend: 'schritt',\r\n                        legendOffset: 35,\r\n                        legendPosition: 'left'\r\n                    }}\r\n                    enableCrosshair\r\n                    crosshairType=\"top-left\"\r\n\r\n                    legends={[\r\n                        {\r\n                            anchor: 'bottom-left',\r\n                            direction: 'column',\r\n                            justify: false,\r\n                            translateX: -100,\r\n                            translateY: 0,\r\n                            itemsSpacing: 0,\r\n                            itemDirection: 'left-to-right',\r\n                            itemWidth: 80,\r\n                            itemHeight: 20,\r\n                            itemOpacity: 0.75,\r\n                            symbolSize: 12,\r\n                            symbolShape: 'circle',\r\n                            symbolBorderColor: 'rgba(0, 0, 0, .5)',\r\n                            effects: [\r\n                                {\r\n                                    on: 'hover',\r\n                                    style: {\r\n                                        itemBackground: 'rgba(0, 0, 0, .03)',\r\n                                        itemOpacity: 1\r\n                                    }\r\n                                }\r\n                            ]\r\n                        }\r\n                    ]}\r\n                />}\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n    function renderKeyStatsForPrediction() {\r\n        if (data.length === 0) {\r\n            return <Skeleton/>\r\n        }\r\n        const d = data[1].data.map(x => x.y)\r\n        const maxPrediction = _.max(d);\r\n        const avgPrediction = _.sum(d) / d.length;\r\n        const minPrediction = _.min(d);\r\n        return <div className={classes.keyStats}>\r\n            <Typography variant={\"h5\"}>\r\n                Prediction - Stats\r\n            </Typography>\r\n            <Typography variant={\"body1\"}>Höchste Prediction: {maxPrediction}</Typography>\r\n            <Typography variant={\"body1\"}>Durchschnittliche Prediction: {avgPrediction}</Typography>\r\n            <Typography variant={\"body1\"}>Kleinste Prediction: {minPrediction}</Typography>\r\n        </div>\r\n    }\r\n\r\n    function renderKeyStatsForDifference() {\r\n        if (data.length === 0) {\r\n            return <Skeleton/>\r\n        }\r\n        const d = data[2].data.map(x => x.y)\r\n        const maxDiff = _.max(d);\r\n        const avgDiff = _.sum(d) / d.length;\r\n        const minDiff = _.min(d);\r\n        return <div className={classes.keyStats}>\r\n            <Typography variant={\"h5\"}>\r\n                Prediction - Stats\r\n            </Typography>\r\n            <Typography variant={\"body1\"}>Höchster Unterschied: {maxDiff}</Typography>\r\n            <Typography variant={\"body1\"}>Durchschnittlicher Unterschied: {avgDiff}</Typography>\r\n            <Typography variant={\"body1\"}>Kleinster Unterschied: {minDiff}</Typography>\r\n        </div>\r\n    }\r\n\r\n    return (<div className={classes.rootContainer}>\r\n        <Typography variant={\"h4\"}><b>Ergebnis von {project.projectTitle}</b></Typography>\r\n        <div className={classes.graphs}>\r\n            <Typography variant={\"h2\"}>Original, Prediction und Difference</Typography>\r\n            {renderGraphic(\"All\")}\r\n            <Divider variant={\"middle\"}/>\r\n\r\n            <Typography variant={\"h2\"}>Original</Typography>\r\n            {renderGraphic(\"original\")}\r\n            <Divider variant={\"middle\"}/>\r\n\r\n            <Typography variant={\"h2\"}>Prediction</Typography>\r\n            {renderGraphic(\"prediction\")}\r\n            {data && renderKeyStatsForPrediction()}\r\n            <Divider variant={\"middle\"}/>\r\n\r\n            <Typography variant={\"h2\"}>Difference</Typography>\r\n            {renderGraphic(\"difference\")}\r\n            {data && renderKeyStatsForDifference()}\r\n            <Divider variant={\"middle\"}/>\r\n\r\n        </div>\r\n    </div>)\r\n}\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\miscellaneous\\SideNavigationBar_Component.jsx",["338","339","340"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport {useHistory, useLocation} from \"react-router-dom\";\r\nimport {makeStyles, useTheme} from \"@material-ui/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\r\nimport History from \"@material-ui/icons/History\";\r\nimport {Settings} from \"@material-ui/icons\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    sideNavRoot: {\r\n        height: \"100%\",\r\n        color: \"white\",\r\n        marginTop: \"15vh\",\r\n        width: \"calc(200px + 0.8em)\"\r\n    },\r\n    nav: {width: \"calc(200px + 0.8em)\"},\r\n    wrapper: {\r\n        margin: 0,\r\n    },\r\n    navItemWrapper: {\r\n        margin: 0,\r\n        width: \"100%\",\r\n        height: \"4rem\",\r\n        transition: \"all .15s ease-in\",\r\n        cursor: \"pointer\",\r\n        \"&:hover $icon\": {\r\n            paddingLeft: \"0.3rem\",\r\n        },\r\n    },\r\n    navItem: {\r\n        display: \"flex\",\r\n        margin: \"1rem 0\",\r\n        textAlign: \"center\",\r\n        width: \"80%\",\r\n        transition: \"all .15s ease-in\",\r\n\r\n    },\r\n    icon: {\r\n        fontSize: 32,\r\n        zIndex: 3,\r\n        transition: \"all 0.1s ease-in\",\r\n        color: theme.palette.text.secondary,\r\n    },\r\n\r\n    navItemText: {\r\n        fontSize: 20,\r\n        color: theme.palette.text.secondary,\r\n        margin: \"auto 1rem\",\r\n        zIndex: 3,\r\n        fontWeight: \"bold\",\r\n    },\r\n    selector: {\r\n        height: \"4rem\",\r\n        background: theme.palette.primary.main,\r\n        position: \"absolute\",\r\n        transition: \"top 0.2s ease-in\",\r\n        minWidth: \"0.8rem\",\r\n        zIndex: 2,\r\n    },\r\n}));\r\nconst SideNavigationBar_Component = ({showNavigationBar: hideNavigationBar}) => {\r\n    //mark: hooks\r\n    const classes = useStyles();\r\n    const location = useLocation();\r\n    const selectorRef = useRef();\r\n    const history = useHistory();\r\n    const theme = useTheme();\r\n\r\n    //TODO: Put somewhere else - should not be hidden in this component\r\n    //mark: navigation Items\r\n    const items = [\r\n        {\r\n            id: \"dashboardItem\",\r\n            ref: useRef(),\r\n            icon: DashboardIcon,\r\n            text: \"Dashboard\",\r\n            enabled: true,\r\n            to: \"dashboard\",\r\n        },\r\n        {\r\n            id: \"verlaufItem\",\r\n            ref: useRef(),\r\n            icon: History,\r\n            text: \"Verlauf\",\r\n            enabled: true,\r\n            to: \"history\",\r\n        },\r\n        {\r\n            id: \"settings\",\r\n            ref: useRef(),\r\n            icon: Settings,\r\n            text: \"Einstellungen\",\r\n            enabled: true,\r\n            to: \"settings\",\r\n        }\r\n    ];\r\n\r\n    //mark: states\r\n    const [activeItemId, setActiveItemId] = useState(\"dashboardItem\");\r\n    const [selectorTop, setSelectorTop] = React.useState();\r\n    const [selectorLeft, setSelectorLeft] = React.useState();\r\n\r\n\r\n    //<editor-fold desc=\"Lifecycle\">\r\n    useEffect(() => {\r\n        items.forEach(\r\n            (x) => location.pathname.includes(x.to) && setActiveItemId(x.id)\r\n        );\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        handleResizeForSelector();\r\n    }, [activeItemId]);\r\n\r\n    useEffect(() => {\r\n        items.forEach(item => {\r\n            if (location.pathname.includes(item.to)) {\r\n                setActiveItemId(item.id);\r\n            }\r\n        });\r\n    }, [location])\r\n    //</editor-fold>\r\n\r\n\r\n    //<editor-fold desc=\"helpers\">\r\n    function handleResizeForSelector() {\r\n        let selectedItemRef = items.find((x) => x.id === activeItemId).ref;\r\n        setSelectorLeft(selectedItemRef.current.getBoundingClientRect().left + 200);\r\n        setSelectorTop(selectedItemRef.current.getBoundingClientRect().top - 16);\r\n    }\r\n\r\n    //</editor-fold>\r\n\r\n    //mark: renders\r\n    return (\r\n        <div className={classes.sideNavRoot}>\r\n            <nav className={classes.nav}>\r\n                <div className={classes.wrapper}>\r\n                    {items.map((item) => {\r\n                        return (\r\n                            <div\r\n                                className={[\r\n                                    classes.navItemWrapper,\r\n                                    activeItemId === item.id ? classes.selectedItem : \"\",\r\n                                ].join(\" \")}\r\n                                onClick={() => {\r\n                                    item.enabled && setActiveItemId(item.id);\r\n                                    history.push(`/${item.to}`);\r\n                                }}\r\n                                key={item.id}\r\n                            >\r\n                                <div\r\n                                    className={classes.navItem}\r\n                                    ref={item.ref}\r\n                                    key={item.id}>\r\n                                    <item.icon\r\n                                        className={classes.icon}\r\n                                        style={activeItemId === item.id ? {color: theme.palette.primary.main} : {}}\r\n                                    />\r\n                                    <Typography\r\n                                        style={activeItemId === item.id ? {color: theme.palette.primary.main} : {}}\r\n                                        component={\"p\"}\r\n                                        className={classes.navItemText}\r\n                                    >\r\n                                        {item.text}\r\n                                    </Typography>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </nav>\r\n            <div\r\n                style={hideNavigationBar ? {opacity: 0} : {top: selectorTop, left: selectorLeft}}\r\n                ref={selectorRef}\r\n                className={classes.selector}\r\n                id=\"selector\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SideNavigationBar_Component;\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\service\\backendServices\\JSONParser.js",[],"C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\redux\\actions\\project_actions.js",[],"C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\service\\backendServices\\ProjectService.js",["341"],"import {store} from \"../../redux/reducers\";\r\nimport Axios from \"axios\";\r\nimport {Project} from \"../../objects/project\";\r\nimport {parseProjectToProjectDTO} from \"./JSONParser\";\r\nimport {BACKEND_URL} from \"../../settings\";\r\nimport {Status} from \"../../objects/enums/status.enum\";\r\nimport {startPolling} from \"./Poller\";\r\nconst _ = require(\"lodash\")\r\n\r\nconst REQUEST_URL = BACKEND_URL;\r\n\r\nconst userId = () => store.getState().user.userId;\r\n\r\nconst checkProjectStatus = () => {\r\n    const state = store.getState();\r\n    const loadingProjects = _.values(state.projects).filter(project => project.project.status === Status.waiting);\r\n    console.log(\"LoadingProjects: \", loadingProjects);\r\n\r\n}\r\ncheckProjectStatus();\r\n\r\nconst getAllProjects = () => {\r\n    let requestOptions = {\r\n        method: 'GET',\r\n        redirect: 'follow',\r\n    };\r\n    console.log(\"Getting Projects for: \" + userId())\r\n\r\n    return fetch(REQUEST_URL + \"/user/\" + userId(), requestOptions)\r\n        .then(response => response.text())\r\n        .then(contents => Promise.resolve(contents))\r\n        .catch(error => {\r\n            return Promise.reject(error)\r\n        });\r\n}\r\n\r\nconst getSingleProject = (projectId) => {\r\n    var requestOptions = {\r\n        method: 'GET',\r\n        redirect: 'follow'\r\n    };\r\n    return fetch(REQUEST_URL + \"/project/\" + projectId, requestOptions)\r\n        .then(response => response.text())\r\n        .then(result => Promise.resolve(result))\r\n        .catch(error => Promise.reject(error));\r\n\r\n}\r\n\r\nconst uploadFile = ({file, nickname, columns, setProgress}) => {\r\n    let formData = new FormData();\r\n    let jsonObject = {\r\n        name: nickname,\r\n        columns: columns,\r\n    }\r\n    let jsonData = JSON.stringify(jsonObject);\r\n\r\n    formData.append(\"referenceChart\", new Blob([jsonData], {type: \"application/json\"}));\r\n    formData.append(\"file\", file, nickname);\r\n\r\n    var config = {\r\n        method: 'post',\r\n        url: REQUEST_URL + \"/file\",\r\n        data: formData,\r\n        onUploadProgress: (progress: ProgressEvent) => {\r\n            setProgress((progress.loaded / progress.total * 100).toFixed(0))\r\n        },\r\n        headers: {\r\n            'Content-Type': 'multipart/form-data',\r\n            ...formData.headers,\r\n        },\r\n    };\r\n\r\n    return new Promise((resolve, reject) =>\r\n        Axios.request(config).then(response => resolve(response.data)).catch(e => reject(e))\r\n    )\r\n}\r\n\r\nconst uploadTargetdataFile = ({file, setProgress}) => {\r\n    let formData = new FormData();\r\n    formData.append(\"file\", file);\r\n\r\n    var config = {\r\n        method: 'post',\r\n        url: REQUEST_URL + \"/file/targetDataSet\",\r\n        data: formData,\r\n        onUploadProgress: (progress: ProgressEvent) => {\r\n            console.log(progress)\r\n            setProgress((progress.loaded / progress.total * 100).toFixed(0))\r\n        }\r\n    };\r\n\r\n    return new Promise((resolve, reject) =>\r\n        Axios.request(config).then(response => resolve(response.data)).catch(e => reject(e))\r\n    )\r\n}\r\n\r\nconst createNewProject = (project: Project) => {\r\n    console.log(\"Creating project!... \", project);\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"multipart/form-data\");\r\n\r\n    var formData = parseProjectToProjectDTO(project);\r\n\r\n    var config = {\r\n        url: REQUEST_URL + \"/project\",\r\n        method: 'post',\r\n        data: formData,\r\n    };\r\n\r\n    return new Promise((resolve, reject) =>\r\n        Axios.request(config).then(response => {\r\n            resolve(response.data)\r\n        }).catch(e => reject(e))\r\n    )\r\n}\r\n\r\nconst permaRemoveProject = (projectId: String) => {\r\n    console.log(\"removing project from db\");\r\n    var config = {\r\n        url: REQUEST_URL + \"/project/\" + projectId,\r\n        method: 'DELETE',\r\n    };\r\n    return new Promise((resolve, reject) =>\r\n        Axios.request(config).then(response => resolve(response.data)).catch(e => reject(e))\r\n    )\r\n}\r\n\r\nconst getFile = (fileId: String) => {\r\n    const config = {\r\n        url: REQUEST_URL + `/project/file/${fileId}`,\r\n        method: \"get\"\r\n    }\r\n    return new Promise((resolve, reject) => Axios.request(config).then(result => resolve(result.data)).catch(error => reject(error)));\r\n}\r\n\r\nconst deleteTempFiles = () => {\r\n    const config = {\r\n        url: REQUEST_URL + `/project/cleanTemp`,\r\n        method: \"DELETE\",\r\n    };\r\n    return new Promise((resolve, reject) => Axios.request(config).then(result => resolve(result.data)).catch(error => reject(error)))\r\n}\r\n\r\nexport {\r\n    deleteTempFiles,\r\n    permaRemoveProject,\r\n    uploadTargetdataFile,\r\n    getAllProjects,\r\n    getSingleProject,\r\n    uploadFile,\r\n    createNewProject,\r\n    getFile,\r\n}\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\service\\UUIDService.js",["342","343","344"],"export function generateUUID() {\r\n    return 'xxxx-xxxx-xxxx-xxxx'.replace(/[x]/g, function(c) {\r\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n        return v.toString(16);\r\n    });\r\n}\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\settingsCollections\\BaseSettings_Component.jsx",["345","346","347","348","349","350","351","352","353","354","355","356","357","358","359"],"//@flow\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {Button, Divider, Fab, useTheme} from \"@material-ui/core\";\r\nimport {TextField_Component} from \"../inputs/TextField_Component\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n    CloseRounded as CloseIcon,\r\n    CloudUploadRounded,\r\n    DeleteRounded, EditAttributesRounded,\r\n    EditRounded,\r\n    MultilineChartRounded, NoteAddRounded\r\n} from \"@material-ui/icons\"\r\nimport {CustomTable_Component} from \"../dataDisplay/Table_Component\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {Basechart, Project} from \"../../objects/project\";\r\nimport {addBasechart, modifyBasechart, modifyProject, removeBasechart} from \"../../redux/actions/project_actions\";\r\nimport {useFilePicker} from 'react-sage';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {TimeInput_Component} from \"../inputs/TimeInput_Component\";\r\nimport {ImportBasechartDialog_Component} from \"../dialogs/ImportBasechartDialog_Component\";\r\nimport {uploadFile, uploadTargetdataFile} from \"../../service/backendServices/ProjectService\";\r\nimport {Alert} from '@material-ui/lab';\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport {useDropzone} from \"react-dropzone\";\r\nimport {useAlert} from \"react-alert\";\r\nimport {hasIndicator} from \"../../redux/selectors/selectors\";\r\nimport ChartPreviewDialog_Component from \"../dialogs/ChartPreviewDialog_Component\";\r\nimport {TargetDataEditor} from \"../dialogs/TargetDataEditor\";\r\nimport {convertToFileAndUploadToServer} from \"../../service/backendServices/TargetDataEditorService\";\r\n\r\nconst _ = require('lodash');\r\n\r\n\r\nconst header = [\r\n    {\r\n        name: \"Name\",\r\n        id: \"chartname\"\r\n    },\r\n    {\r\n        name: \"Spitzname\",\r\n        id: \"nickname\"\r\n    },\r\n    {\r\n        name: \"Spaltenname\",\r\n        id: \"columns\"\r\n    }\r\n];\r\nconst targetDataHeader = [\r\n    {\r\n        name: \"Name\",\r\n        id: \"filename\",\r\n    }\r\n]\r\nconst useStyles = makeStyles((theme) => ({\r\n    baseSettingsRoot: {padding: 20},\r\n    zieldatensatzUpload: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    },\r\n    uploadButton: {\r\n        textDecorationLine: \"underline\",\r\n        fontWeight: \"bold\",\r\n        cursor: \"pointer\"\r\n\r\n    },\r\n    uploadAlert: {\r\n        width: 250,\r\n    },\r\n    progress: {\r\n        position: \"absolute\",\r\n        left: 15,\r\n        top: 0,\r\n    },\r\n    dropContainer: {\r\n        padding: 0,\r\n    }\r\n}));\r\ntype Props = {\r\n    project: Project,\r\n    detail: boolean\r\n}\r\n\r\nfunction BaseSettings_Component(props: Props) {\r\n    //mark: hooks\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const alert = useAlert();\r\n    const {\r\n        acceptedFiles,\r\n        getRootProps,\r\n        getInputProps\r\n    } = useDropzone({accept: ['application/vnd.ms-excel, text/csv, text/x-csv', '.csv'], multiple: true});\r\n    const targetDataDropzone = useDropzone({accept: ['application/vnd.ms-excel, text/csv, text/x-csv','.csv'], multiple: false})\r\n\r\n    //mark: states\r\n    const [importDialogOpen, setImportDialogOpen] = useState(false);\r\n    const [loading, setLoading] = useState(null);\r\n    const [targetDataOpen, setTargetDataOpen] = useState(false);\r\n    const [chartPreviewDialog, setChartPreviewDialog] = useState({\r\n        basechartId: null, open: false\r\n    })\r\n\r\n\r\n    //<editor-fold desc=\"lifecycle\">\r\n    useEffect(() => {\r\n        console.log(\"Acccepted Files are: \", acceptedFiles)\r\n        if (acceptedFiles.length === 0) {\r\n            return;\r\n        }\r\n        setImportDialogOpen(true);\r\n    }, [acceptedFiles])\r\n\r\n    useEffect(() => {\r\n        if (targetDataDropzone.acceptedFiles.length === 0) {\r\n            return;\r\n        }\r\n        uploadTargetdataFile({\r\n            file: targetDataDropzone.acceptedFiles[0],\r\n            setProgress: p => setLoading({\r\n                ...loading,\r\n                '0': {name: \"Zieldatensatz: \" + targetDataDropzone.acceptedFiles[0].name, error: null, progress: p}\r\n            })\r\n        })\r\n            .then(r => {\r\n                console.log(\"Uploaded!:\", r)\r\n                handleChange(\"zieldatensatz\", {id: r, filename: targetDataDropzone.acceptedFiles[0].name})\r\n                setLoading(_.omit(loading, '0'))\r\n                if (_.values(loading).length === 0) {\r\n                    setLoading(null);\r\n                }\r\n            })\r\n            .catch(e => setLoading({...loading, 0: {name: \"Zieldatensatz\", error: e, progress: -1}}))\r\n    }, [targetDataDropzone.acceptedFiles])\r\n\r\n    //</editor-fold>\r\n\r\n\r\n    //<editor-fold desc=\"helpers\">\r\n    const onDelete = delete_id => {\r\n        if (hasIndicator(props.project, delete_id)) {\r\n            alert.show(\"Du hast mit diesem Basischart bereits einen Indikator angelegt. Bitte entferne diesen zuerst.\", {\r\n                title: \"Achtung.\",\r\n                closeCopy: \"Okay\",\r\n                actions: []\r\n            })\r\n        } else {\r\n            alert.show(\"Bist du sicher das du dieses Basischart löschen willst?\", {\r\n                title: \"Bestätigen.\",\r\n                closeCopy: \"Abbrechen\",\r\n                actions: [{\r\n                    copy: \"Löschen\",\r\n                    onClick: () => dispatch(removeBasechart(delete_id, props.project.projectId)),\r\n                }]\r\n            })\r\n        }\r\n\r\n    }\r\n    const handleChange = (caller: string, data) => {\r\n        dispatch(modifyProject(props.project.projectId, caller, data))\r\n    }\r\n\r\n    function timeSlotChanged(unit) {\r\n        handleChange(\"timeunit\", unit)\r\n    }\r\n\r\n    function handleImportDialogDone(args) {\r\n\r\n        let index: number = 0;\r\n        if (props.project.basecharts) {\r\n            index = _.last(props.project.basecharts) == null ? 0 : _.last(props.project.basecharts)._id;\r\n            index++;\r\n        }\r\n        for (let row of args) {\r\n            let basechart = new Basechart();\r\n            console.log(\"row \" + row.name);\r\n            basechart.grouped = row.grouped;\r\n            basechart.chartname = row.name;\r\n            basechart.columns = row.grouped ? _.values(row.selectedRows) : row.selectedRows;\r\n            basechart.editable = true;\r\n            basechart.nickname = row.nickname;\r\n            basechart.uploadProgress = 0;\r\n            //Upload Basechart in each Project.\r\n            uploadFile(\r\n                {\r\n                    file: row.file,\r\n                    nickname: row.nickname,\r\n                    columns: row.selectedRows,\r\n                    setProgress: p => setLoading({...loading, [index]: {name: row.name, error: null, progress: p}})\r\n                }\r\n            )\r\n                .then(x => {\r\n                        basechart._id = x;\r\n                        console.log(\"Adding basechart with id: \", basechart, x)\r\n\r\n                        dispatch(addBasechart(props.project, basechart))\r\n                        setLoading(_.omit(loading, index + ''));\r\n                        if (_.values(loading).length === 0) {\r\n                            setLoading(null);\r\n                        }\r\n                    }\r\n                )\r\n                .catch(e => {\r\n                    console.log(\"promise in upload failed with: \" + e);\r\n                    console.error(e);\r\n                    setLoading({...loading, [row._id]: {name: row.name, error: e, progress: -1}})\r\n                })\r\n        }\r\n    }\r\n\r\n    function showAlert() {\r\n        alert.show(\"0: Nichts tun. 1: Kaufen. 0.5: Verkaufen\", {\r\n            title: \"Der Zieldatensatz soll eine Datumsspalte enthalten und einen zusätzlichen Wert der entweder 0, 0.5 oder 1 sein kann.\",\r\n            closeCopy: \"Okay\",\r\n            actions: []\r\n        });\r\n    }\r\n\r\n    function fileGeneratedCallback(fileContents: String) {\r\n        convertToFileAndUploadToServer(fileContents, p => {}).then(response => {\r\n            handleChange(\"zieldatensatz\", {id: response.id, filename: response.filename})\r\n        }).catch(e => setLoading({...loading, 0: {name: \"Zieldatensatz\", error: e, progress: -1}}))\r\n    }\r\n\r\n\r\n    //</editor-fold>\r\n\r\n    //<editor-fold desc=\"render helpers\">\r\n    function renderUploadProgress() {\r\n        if (loading) {\r\n            const alerts = [];\r\n            _.mapValues(loading, (v) => {\r\n                console.log(\"Upload progress for: \", v);\r\n                if (v) {\r\n                    if (v.error) {\r\n                        alerts.push(\r\n                            <div>\r\n                                {v.name} failed to upload!\r\n                                <hr/>\r\n                            </div>\r\n                        );\r\n                    } else {\r\n                        alerts.push(\r\n                            <div>\r\n                                Uploading: {v.name}\r\n                                <LinearProgress value={v.progress} variant={\"determinate\"} style={{width: \"50vw\"}}/>\r\n                                <hr/>\r\n                            </div>\r\n                        )\r\n                    }\r\n                }\r\n            })\r\n            return <Alert action={\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    color=\"inherit\"\r\n                    size=\"small\"\r\n                    onClick={() => setLoading(null)}\r\n                >\r\n                    <CloseIcon fontSize=\"inherit\"/>\r\n                </IconButton>\r\n            } severity=\"info\">\r\n                {alerts}\r\n            </Alert>\r\n        }\r\n\r\n    }\r\n\r\n    function renderDrop(basedata: boolean) {\r\n        var rootProps;\r\n        var inputProps;\r\n        if (basedata) {\r\n            rootProps = getRootProps({className: 'dropzone'});\r\n            inputProps = getInputProps();\r\n        } else {\r\n            rootProps = targetDataDropzone.getRootProps({className: 'dropzone'});\r\n            inputProps = targetDataDropzone.getInputProps();\r\n        }\r\n        return <section className={classes.dropContainer}>\r\n            <div {...rootProps}>\r\n                <input {...inputProps} style={{margin: 20}} />\r\n                {basedata ? <Typography variant={\"body2\"}>Ziehe deine Basisdaten hier hinein oder klicke um sie\r\n                        auszuwählen.</Typography> :\r\n                    <Typography variant={\"body2\"}>Ziehe deinen Zieldatensatz hier hinein oder klicke um ihn\r\n                        auszuwählen.</Typography>}\r\n            </div>\r\n        </section>;\r\n    }\r\n\r\n\r\n    //</editor-fold>\r\n\r\n\r\n//mark: render\r\n    return <div className={classes.baseSettingsRoot}>\r\n        <ChartPreviewDialog_Component projectId={props.project.projectId} basechartId={chartPreviewDialog.basechartId}\r\n                                      open={chartPreviewDialog.open}\r\n                                      setOpen={(open) => setChartPreviewDialog(Object.assign({}, chartPreviewDialog, {open: open}))}/>\r\n        <ImportBasechartDialog_Component files={acceptedFiles} setOpen={setImportDialogOpen} open={importDialogOpen}\r\n                                         onDone={handleImportDialogDone}/>\r\n        <TargetDataEditor project={props.project} setOpen={setTargetDataOpen} open={targetDataOpen}\r\n                          fileGeneratedCallback={fileGeneratedCallback}/>\r\n\r\n        <Grid container direction=\"row\"\r\n              justify=\"center\"\r\n              alignItems=\"center\"\r\n              spacing={4}\r\n        >\r\n            <Grid item xs={12}>\r\n                {renderUploadProgress()}\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <TextField_Component defaultValue={props.project ? props.project.projectTitle : \"\"}\r\n                                     onDone={(e) => handleChange(\"projectTitle\", e.target.value)}\r\n                                     fullWidth={true}\r\n                                     readOnly={props.detail}\r\n                                     label={\"Projektname\"}\r\n                                     placeholder={\"Projektname...\"}\r\n                                     notWhite={true}/>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} spacing={2}>\r\n                <Typography variant={\"h2\"}\r\n                            style={{marginBottom: 10}}>\r\n                    Basisdaten hochladen.\r\n                </Typography>\r\n                <CustomTable_Component\r\n                    actions={[\r\n                        {\r\n                            icon: () => <MultilineChartRounded\r\n                                fontSize={\"large\"}\r\n                                color={\"primary\"}\r\n                            />,\r\n                            onClick: (id) => {\r\n                                console.log(\"Opening id: \", id);\r\n                                setChartPreviewDialog({\r\n                                    open: true,\r\n                                    basechartId: id\r\n                                })\r\n                            }\r\n                        },\r\n                        !props.detail ? {\r\n                            icon:\r\n                                () => <DeleteRounded\r\n                                    fontSize={\"large\"}\r\n                                    color={\"primary\"}\r\n                                />,\r\n                            onClick: (id) => onDelete(id)\r\n                        } : {icon: () => null}\r\n\r\n                    ]}\r\n                    deletable={true}\r\n                    settings={{\r\n                        header: header,\r\n                        data: props.project ? (props.project.basecharts ?? []) : []\r\n                    }}/>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                {renderDrop(true)}\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Divider variant={\"middle\"}/>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Typography variant={\"h2\"}\r\n                            style={{marginBottom: 10}}>\r\n                    {\"Zieldatensatz hochladen.\"}\r\n                </Typography>\r\n                <Typography variant={\"body2\"}>{props.project.zieldatensatz ? \"Zieldatensatz neu generieren:\" : \"Zieldatensatz generieren:\"} </Typography>\r\n\r\n                <Button variant={\"outlined\"} onClick={() => setTargetDataOpen(true)}\r\n                        style={{marginBottom: 20}}\r\n                        disabled={!props.project.basecharts || props.project.basecharts.length === 0 || props.detail}>\r\n                    {props.project.zieldatensatz ? \"Neu generieren\" : \"Zieldatensatz generieren\"}\r\n                </Button>\r\n                <Typography variant={\"body2\"}>oder bestehenden Zieldatesatz hochladen:</Typography>\r\n                {props.project.zieldatensatz ? <CustomTable_Component\r\n                    actions={[\r\n                        {\r\n                            icon: () => <DeleteRounded\r\n                                fontSize={\"large\"}\r\n                                color={\"primary\"}\r\n                            />,\r\n                            onClick: (id) => {\r\n                                handleChange(\"zieldatensatz\", null)\r\n                            }\r\n                        }\r\n                    ]}\r\n                    settings={{\r\n                        header: targetDataHeader,\r\n                        data: [{\r\n                            _id: props.project.zieldatensatz.filename,\r\n                            filename: props.project.zieldatensatz.filename\r\n                        }]\r\n                    }}\r\n                /> : <></>}\r\n                {renderDrop(false)}\r\n                <Typography variant={\"body2\"} style={{textDecoration: \"underline\", cursor: \"pointer\", paddingTop: 20}}\r\n                            onClick={showAlert}>Wie soll so ein Zieldatensatz aussehen?</Typography>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <TimeInput_Component readOnly={props.detail} timeunit={props.project.timeunit}\r\n                                     onChange={(unit) => timeSlotChanged(unit)}/>\r\n            </Grid>\r\n        </Grid>\r\n\r\n    </div>\r\n}\r\n\r\nexport default connect()(BaseSettings_Component);\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\settingsCollections\\IndicatorSettings_Component.jsx",["360","361","362","363","364","365","366"],"import React, {useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {TextField_Component} from \"../inputs/TextField_Component\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport {AddRounded, DeleteRounded, ErrorRounded, InsertChart, InsertChartRounded} from \"@material-ui/icons\";\r\nimport {CustomTable_Component} from \"../dataDisplay/Table_Component\";\r\nimport AddIndicatorDialog_Component from \"../dialogs/AddIndicatorDialog_Component\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addIndicator, modifyIndicator, removeBasechart, removeIndicator} from \"../../redux/actions/project_actions\";\r\nimport {useAlert} from \"react-alert\";\r\nimport {Indicator} from \"../../objects/project\";\r\nimport {generateIndicator} from \"../../service/backendServices/IndicatorService\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport {Status} from \"../../objects/enums/status.enum\";\r\nimport ChartPreviewDialog_Component from \"../dialogs/ChartPreviewDialog_Component\";\r\nimport {projectsReducer} from \"../../redux/reducers/projects_reducer\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: 20,\r\n    },\r\n    buttonTitle: {\r\n        fontSize: 20,\r\n        fontWeight: \"bold\",\r\n        color: theme.palette.primary.main\r\n    },\r\n    createButton: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\"\r\n    }\r\n}));\r\nconst header = [\r\n    {name: \"Indikatoren\", id: \"definition\"},\r\n    {name: \"Kombinationen\", id: \"combinations\"},\r\n    {name: \"Basischart\", id: \"basechart.nickname\"}\r\n];\r\n\r\nexport const IndicatorSettings_Component = ({project}) => {\r\n    //mark: hooks\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const alert = useAlert();\r\n    //mark: state\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [selectedIndicatorId, setSelectedIndicatorId] = useState(null);\r\n\r\n    //<editor-fold desc=\"helpers\">\r\n    const onDelete = delete_id => {\r\n        alert.show(\"Bist du sicher das du diesen Indikator löschen willst?\", {\r\n            title: \"Bestätigen.\",\r\n            closeCopy: \"Abbrechen\",\r\n            actions: [{\r\n                copy: \"Löschen\",\r\n                onClick: () => dispatch(removeIndicator(delete_id, project.projectId)),\r\n            }]\r\n        })\r\n\r\n    }\r\n\r\n    function handleDone(indicator: Indicator) {\r\n        setDialogOpen(false);\r\n        indicator.status = Status.processing;\r\n        dispatch(addIndicator(indicator, project.projectId));\r\n        generateIndicator(project, indicator.definition, indicator.basechart._id).then(r => {\r\n                indicator = {...indicator};\r\n                indicator.status = Status.passed;\r\n                indicator.paths = r.data;\r\n                dispatch(modifyIndicator(indicator, project.projectId));\r\n                console.log(\"FINISHED PROCESSING INDICAOTR: \" + r);\r\n            }\r\n        ).catch(e => {\r\n            indicator = {...indicator};\r\n            indicator.status = Status.error;\r\n            dispatch(modifyIndicator(indicator, project.projectId));\r\n            console.error(e);\r\n        })\r\n    }\r\n\r\n    //</editor-fold>\r\n\r\n    //mark: render\r\n    return <><AddIndicatorDialog_Component open={dialogOpen} project={project} setOpen={setDialogOpen}\r\n                                           onDone={handleDone}/>\r\n           <ChartPreviewDialog_Component open={selectedIndicatorId !== null} setOpen={() => setSelectedIndicatorId(null)} projectId={project.projectId} indicatorId={selectedIndicatorId}/>\r\n        <Grid direction=\"row\"\r\n              justify=\"center\"\r\n              alignItems=\"center\"\r\n              container\r\n              spacing={2}>\r\n            <Grid item xs={12} display={\"flex\"} flexdirection={\"row\"}>\r\n                <div className={classes.createButton}>\r\n                    <Fab style={{marginRight: 20}} color={\"primary\"} onClick={() => setDialogOpen(!dialogOpen)}>\r\n                        <AddRounded fontSize={\"large\"}/>\r\n                    </Fab>\r\n                    <h1 className={classes.buttonTitle}>Neuen Indikator erstellen.</h1>\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <CustomTable_Component actions={[\r\n                    {\r\n                        icon: () =>\r\n                             <DeleteRounded\r\n                                fontSize={\"large\"}\r\n                                color={\"primary\"}\r\n                            />,\r\n                        onClick: (id) => onDelete(id)\r\n                    },\r\n                    {\r\n                        icon: (indicator) => {\r\n                            if(indicator.status === Status.passed) return <InsertChartRounded fontSize={\"large\"} color={\"primary\"}/>;\r\n                            if(indicator.status === Status.processing) return <CircularProgress/>;\r\n                            if(indicator.status === Status.error) return <ErrorRounded fontSize={\"large\"} color={\"primary\"}/>;\r\n                        },\r\n                        onClick: (id) => {\r\n                            const indicator = {...project.indicator.find(indicator => indicator._id === id)}\r\n                            if(indicator.status === Status.passed){\r\n                                setSelectedIndicatorId(id)\r\n                            }else if(indicator.status === Status.error){\r\n                                alert.show(\"Beim Erstellen des Indikators ist ein Fehler aufgetreten.\", {\r\n                                    title: \"\",\r\n                                    closeCopy: \"Okay\",\r\n                                    actions: [{\r\n                                        copy: \"Retry\",\r\n                                        onClick: () => {\r\n                                            //First delete indicator\r\n                                            dispatch(removeIndicator(id, project.projectId))\r\n                                            handleDone(indicator)\r\n                                        }\r\n                                    }]\r\n                                })\r\n                            }\r\n                        }\r\n                    }\r\n                ]} settings={{header: header, data: project.indicator ?? []}} onDelete={onDelete}/>\r\n            </Grid>\r\n        </Grid></>\r\n}\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\cells\\SettingsCell_Component.jsx",[],"C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\service\\backendServices\\TargetDataEditorService.js",["367"],"import {uploadTargetdataFile} from \"./ProjectService\";\r\n\r\nconst _ = require(\"lodash\");\r\nconst Papa = require('papaparse')\r\nconst fs = require('fs');\r\nexport const convertToTargetData = (buys: [{x: any, y: any}], sells: [{x: any, y: any}], basechartData: [{x: any, y: any}]) => {\r\n    const targetData = []\r\n    basechartData.forEach(value => {\r\n        const indexOfPointBuy = _.findIndex(buys, (buy) => buy.x === value.x && value.y === buy.y)\r\n        if(indexOfPointBuy !== -1){\r\n            targetData.push({\r\n                value: 1,\r\n            })\r\n            return;\r\n        }\r\n        const indexOfPointSell = _.findIndex(sells, (sell) => sell.x === value.x && value.y === sell.y)\r\n        if(indexOfPointSell !== -1){\r\n            targetData.push({\r\n                value: 0,\r\n            })\r\n            return;\r\n        }\r\n        targetData.push({\r\n            value: 0.5\r\n        })\r\n    })\r\n    return Papa.unparse(targetData, {\r\n        delimiter: \";\",\r\n        header: false,\r\n    })\r\n}\r\nexport const convertToFileAndUploadToServer = (fileContent: String, setProgress: Function) => {\r\n    var blob = new Blob([fileContent], {type: \"text/plain\"});\r\n    var file = new File([blob], \"generated.csv\", {type: \"text/plain\"})\r\n    return new Promise((resolve, reject) => {\r\n        uploadTargetdataFile({file: file, setProgress: setProgress}).then((r) => resolve({id: r, filename: \"generated.csv\"})).catch(reason => reject(reason));\r\n    })\r\n\r\n}\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\dialogs\\TargetDataEditor.jsx",["368","369","370","371","372","373"],"import React, {useEffect, useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {\r\n    Box,\r\n    CircularProgress,\r\n    Dialog, DialogActions,\r\n    DialogContent,\r\n    DialogTitle, Divider, IconButton,\r\n    MenuItem, Slider,\r\n    TextField,\r\n    Typography,\r\n    useTheme\r\n} from \"@material-ui/core\";\r\nimport {getFile} from \"../../service/backendServices/ProjectService\";\r\nimport {useStore} from \"react-redux\";\r\nimport {ResponsiveLineCanvas} from \"@nivo/line\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useAlert} from \"react-alert\";\r\nimport {convertToTargetData} from \"../../service/backendServices/TargetDataEditorService\";\r\nimport {DeleteRounded, RemoveRounded} from \"@material-ui/icons\";\r\n\r\nconst _ = require(\"lodash\")\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {},\r\n    editor: {\r\n        display: \"flex\",\r\n        direction: \"row\",\r\n        height: \"100%\",\r\n        width: \"100%\"\r\n    },\r\n    editorPan: {\r\n        width: \"20%\"\r\n    }\r\n}));\r\nconst EditorMode = {\r\n    SELL: \"sell\",\r\n    BUY: \"buy\",\r\n    UNSET: \"unset\",\r\n}\r\nconst baseEditorSettings = {\r\n    editorMode: EditorMode.UNSET,\r\n    buys: [],\r\n    sells: [],\r\n}\r\nexport const TargetDataEditor = (props: { project: Project, open: boolean, setOpen: Function, fileGeneratedCallback: Function }) => {\r\n    const classes = useStyles();\r\n    const store = useStore().getState();\r\n    const theme = useTheme();\r\n    const alert = useAlert();\r\n\r\n    const [data, setData] = useState([]);\r\n    const [fields, setFields] = useState([]);\r\n    const [selectedBasechart, setSelectedbasechart] = useState();\r\n    const [editorSettings, setEditorSettings] = useState(baseEditorSettings);\r\n    const [sliderValue, setSliderValue] = useState(5);\r\n\r\n    useEffect(() => {\r\n        setData([]);\r\n        setFields([]);\r\n        setSelectedbasechart(null)\r\n        setEditorSettings(baseEditorSettings)\r\n    }, [props.open])\r\n\r\n\r\n    useEffect(() => {\r\n        if (selectedBasechart) {\r\n            setData([]);\r\n            setFields([]);\r\n            setSliderValue(5);\r\n            getFile(selectedBasechart._id).then(d => transformData(d, selectedBasechart._id))\r\n        }\r\n    }, [selectedBasechart])\r\n\r\n    useEffect(() => {\r\n        setData([]);\r\n        setData([...data, {id: \"buys\", data: editorSettings.buys}, {\r\n            id: \"sells\",\r\n            data: editorSettings.sells\r\n        }])\r\n    }, [editorSettings])\r\n\r\n    const transformData = (input, basechartId) => {\r\n        const Papa = require(\"papaparse\");\r\n        const papaConfig = {\r\n            header: true,\r\n            fastMode: true,\r\n            complete: (result) => {\r\n                const basechart = store.projects[props.project.projectId].project.basecharts.find(basechart => basechart._id === basechartId)\r\n                const resultData = basechart.columns.map(column => {\r\n                    return {\r\n                        id: column,\r\n                        data: result.data.filter(x => !_.isNaN(parseFloat(x[column]))).map((x, i) => {\r\n                            const dateRow = x[result.meta.fields[0]];\r\n                            const valueRow = parseFloat(x[column])\r\n                            return {\r\n                                x: dateRow,\r\n                                y: valueRow\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n                setData([...data, ...resultData])\r\n                setFields([...fields, ...basechart.columns])\r\n            }\r\n        }\r\n        Papa.parse(input, papaConfig)\r\n    }\r\n\r\n    function addEvent(point) {\r\n        const dataArray: any[] = data[0].data;\r\n        const indexOfPoint = dataArray.findIndex(value => value.x === point.data.x && value.y === point.data.y);\r\n\r\n        if (editorSettings.editorMode === EditorMode.BUY) {\r\n            const buys = Array.from([...editorSettings.buys])\r\n            for (let i = indexOfPoint; i < indexOfPoint + sliderValue; i++) {\r\n                if (!buys.includes(dataArray[i])) buys.push(dataArray[i])\r\n            }\r\n            setEditorSettings({\r\n                ...editorSettings, buys: buys\r\n            })\r\n        } else if (editorSettings.editorMode === EditorMode.SELL) {\r\n            const sells = Array.from([...editorSettings.sells])\r\n            for (let i = indexOfPoint; i < indexOfPoint + sliderValue; i++) {\r\n                if (!sells.includes(dataArray[i])) sells.push(dataArray[i])\r\n            }\r\n            setEditorSettings({\r\n                ...editorSettings, sells: sells\r\n            })\r\n        }\r\n    }\r\n\r\n    function renderEditor() {\r\n        return <div className={classes.editor}>\r\n            <div style={{height: \"100%\", width: \"80%\", overflowY: \"scroll\"}}>\r\n                <div style={{width: \"400%\", height: \"100%\"}}><ResponsiveLineCanvas\r\n                    data={data}\r\n                    margin={{top: 50, right: 50, bottom: 50, left: 50}}\r\n                    lineWidth={2}\r\n                    curve={\"linear\"}\r\n                    colors={{scheme: \"red_blue\"}}\r\n                    enableGridX={false}\r\n                    enableGridY={true}\r\n                    layers={[\r\n                        'grid',\r\n                        'markers',\r\n                        'areas',\r\n                        ({lineGenerator, series, ctx, lineWidth, innerWidth}) => {\r\n                            lineGenerator.context(ctx)\r\n                            series.forEach(serie => {\r\n                                if (serie.id !== \"buys\" && serie.id !== \"sells\") {\r\n                                    ctx.strokeStyle = \"black\"\r\n                                    ctx.lineWidth = lineWidth\r\n                                    ctx.beginPath()\r\n                                    lineGenerator(serie.data.map(d => d.position))\r\n                                    ctx.stroke()\r\n                                }\r\n                            })\r\n                        },\r\n                        ({points}) => {\r\n                            points.forEach(p => {\r\n                                const indexOfPointBuy = _.findIndex(editorSettings.buys, (buy) => buy.x === p.data.x && p.data.y === buy.y)\r\n                                if (indexOfPointBuy !== -1) {\r\n                                    p.color = \"#00ff34\"\r\n                                    p.pointSize = \"16px\"\r\n                                    return;\r\n                                }\r\n                                const indexOfPointSell = _.findIndex(editorSettings.sells, (buy) => buy.x === p.data.x && p.data.y === buy.y)\r\n                                if (indexOfPointSell !== -1) {\r\n                                    p.color = \"#ff0000\"\r\n                                    p.pointSize = \"16px\"\r\n                                    return;\r\n                                }\r\n                                p.color = \"transparent\"\r\n                            })\r\n                        },\r\n                        'points',\r\n                        'mesh',\r\n                        'legends',\r\n                        'axes'\r\n                    ]}\r\n                    axisLeft={{\r\n                        orient: 'left',\r\n                        tickSize: 5,\r\n                        tickPadding: 5,\r\n                        tickRotation: 0,\r\n                        legend: 'count',\r\n                        legendOffset: 0,\r\n                        legendPosition: 'middle'\r\n                    }}\r\n                    useMesh={true}\r\n                    pointSize={10}\r\n                    pointColor={\"transparent\"}\r\n                    axisBottom={null}\r\n                    enableCrosshair\r\n                    onClick={(point, event) => addEvent(point)}\r\n                    crosshairType={\"bottom-left\"}/>\r\n                </div>\r\n            </div>\r\n            <div className={classes.editorPan}>\r\n                <Typography variant={\"h5\"}>Editor Settings</Typography>\r\n                <Box m={4}>\r\n                    <Typography variant={\"body1\"}>\r\n                        zu setzende Punkte\r\n                    </Typography>\r\n                    <Slider\r\n                        defaultValue={5}\r\n                        step={1}\r\n                        min={1}\r\n                        max={25}\r\n                        valueLabelDisplay={\"on\"}\r\n                        value={sliderValue}\r\n                        onChange={(event, value) => setSliderValue(value)}\r\n                    />\r\n                    <Typography variant={\"caption\"}>\r\n                        Je mehr Buy und Sell Points zu setzt, desto besser funktioniert die Vorhersage. Wenn du also\r\n                        einen großen Graphen hast wähle hier eine große Zahl aus.\r\n                    </Typography>\r\n                </Box>\r\n                <Box m={4} display={\"flex\"} flexDirection={\"column\"}>\r\n                    <Button color=\"primary\" variant={\"contained\"}\r\n                            style={{marginBottom: 10}}\r\n                            onClick={() => setEditorSettings({...editorSettings, editorMode: EditorMode.BUY})}>BUY\r\n                        Modus</Button>\r\n                    <Button color={\"secondary\"} variant={\"contained\"}\r\n                            onClick={() => setEditorSettings({...editorSettings, editorMode: EditorMode.SELL})}>SELL\r\n                        Modus</Button>\r\n                    <Typography variant={\"body1\"}>Derzeitiger Modus: {editorSettings.editorMode}</Typography>\r\n                </Box>\r\n                <Divider variant={\"fullWidth\"}/>\r\n                <Box m={4}>\r\n                    <Typography variant={\"body1\"}>Sells:</Typography>\r\n                    {editorSettings.sells.map(sell => {\r\n                        return <Box flexDirection={\"row\"} display={\"flex\"} alignItems={\"center\"}\r\n                                    justifyContent={\"center\"}>\r\n                            <Typography variant={\"body2\"}>{sell.x} / {sell.y}</Typography>\r\n                            <IconButton size={\"small\"} onClick={() => {\r\n                                var sells = Array.from(editorSettings.sells);\r\n                                _.remove(sells, (x) => x === sell);\r\n                                setEditorSettings(Object.assign({}, editorSettings, {\"sells\": sells}))\r\n                            }}>\r\n                                <DeleteRounded/>\r\n                            </IconButton>\r\n                        </Box>\r\n                    })}\r\n                </Box>\r\n                <Divider variant={\"fullWidth\"}/>\r\n                <Box m={4}>\r\n                    <Typography variant={\"body1\"}>Buys:</Typography>\r\n                    {editorSettings.buys.map(buy => {\r\n                        return <Box flexDirection={\"row\"} display={\"flex\"} alignItems={\"center\"}\r\n                                    justifyContent={\"center\"}>\r\n                            <Typography variant={\"body2\"}>{buy.x} / {buy.y}</Typography>\r\n                            <IconButton size={\"small\"} onClick={() => {\r\n                                var buys = Array.from(editorSettings.buys);\r\n                                _.remove(buys, (x) => x === buy);\r\n                                setEditorSettings(Object.assign({}, editorSettings, {\"buys\": buys}))\r\n                            }}>\r\n                                <DeleteRounded/>\r\n                            </IconButton>\r\n                        </Box>\r\n                    })}\r\n                </Box>\r\n                <Divider variant={\"fullWidth\"}/>\r\n                <Box m={4} display={\"flex\"} flexDirection={\"column\"}>\r\n                    <Button color=\"primary\" variant={\"outlined\"}\r\n                            style={{marginBottom: 10}}\r\n                            onClick={() => setEditorSettings({...editorSettings, buys: []})}>Clear BUYS</Button>\r\n                    <Button color={\"secondary\"} variant={\"outlined\"}\r\n                            onClick={() => setEditorSettings({...editorSettings, sells: []})}>Clear SELLS</Button>\r\n                </Box>\r\n            </div>\r\n        </div>\r\n\r\n    }\r\n\r\n    return <div>{\r\n        props.project.basecharts ? <Dialog fullScreen open={props.open} className={classes.dialogRoot}>\r\n            <DialogTitle>\r\n                <Typography variant={\"h2\"}>\r\n                    Zieldatensatz-Editor\r\n                </Typography>\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                {\r\n                    !selectedBasechart ?\r\n                        <TextField\r\n                            variant={\"outlined\"}\r\n                            fullWidth\r\n                            label={\"Basisdaten auswählen\"}\r\n                            onChange={e => setSelectedbasechart(e.target.value)}\r\n                            select>\r\n                            {props.project.basecharts.map(basechart =>\r\n                                <MenuItem value={basechart} key={basechart._id}>\r\n                                    {basechart.nickname}\r\n                                </MenuItem>\r\n                            )}\r\n                        </TextField>\r\n                        :\r\n                        data.length === 0 ? <CircularProgress/> :\r\n                            renderEditor()\r\n                }\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button variant={\"text\"} color={\"secondary\"} onClick={() => props.setOpen(false)}>Abbrechen</Button>\r\n                <Button\r\n                    disabled={!(selectedBasechart && editorSettings.buys.length !== 0 && editorSettings.sells.length !== 0)}\r\n                    variant={\"contained\"} color={\"primary\"} onClick={() => {\r\n                    const d = data.find(value => value.id !== \"buys\" && value.id !== \"sells\");\r\n                    const targetDataText = convertToTargetData(editorSettings.buys, editorSettings.sells, d.data)\r\n                    //MARK: GENERATED TARGET DATA FILE!\r\n                    props.fileGeneratedCallback(targetDataText);\r\n                    props.setOpen(false);\r\n                    }}>Generieren</Button>\r\n            </DialogActions>\r\n        </Dialog> : <div></div>}</div>\r\n}\r\n\r\n\r\n\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\dialogs\\ImportBasechartDialog_Component.jsx",["374","375","376","377"],"import React, {useEffect, useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport MobileStepper from \"@material-ui/core/MobileStepper\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Papa from \"papaparse\";\r\nimport {Basechart} from \"../../objects/project\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport Skeleton from \"react-loading-skeleton\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport {TextField_Component} from \"../inputs/TextField_Component\";\r\nimport {useAlert} from \"react-alert\";\r\n\r\nconst _ = require('lodash');\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: \"40px 20px\",\r\n        zIndex: 0,\r\n    },\r\n    doneButton: {\r\n        width: \"200px\",\r\n        height: \"50px\",\r\n\r\n    }\r\n}));\r\nexport const ImportBasechartDialog_Component = ({open, setOpen, onDone, files}) => {\r\n    //mark: hooks\r\n    const classes = useStyles();\r\n    const alert = useAlert();\r\n    const [step, setStep] = useState(0);\r\n    const [basecharts, setBasecharts] = useState([]);\r\n    const [doneButtonEnabled, setDoneButtonEnabled] = useState(false);\r\n\r\n\r\n    //<editor-fold desc=\"lifecycle\">\r\n    useEffect(() => {\r\n        //Parse new files into basecharts\r\n        setBasecharts([]);\r\n        let tempCharts = [];\r\n        let promises = [];\r\n\r\n        files.forEach(file => {\r\n            const filePromise = new Promise(resolve => {\r\n                Papa.parse(file, {\r\n                    worker: true,\r\n                    header: true,\r\n                    fastMode: true,\r\n                    preview: 4,\r\n                    complete: (result) => {\r\n                        if (result.meta.delimiter !== ',' && open) {\r\n                            alert.show(\"Die Datei muss mit einem Beistrich \\\",\\\" getrennt sein!\", {\r\n                                title: \"\",\r\n                                closeCopy: \"\",\r\n                                actions: [{\r\n                                    copy: \"Okay\",\r\n                                    onClick: () => setOpen(false)\r\n                                }]\r\n                            })\r\n                            return;\r\n                        }\r\n                        if (!result.meta.fields.toString().toLowerCase().includes(\"date\")) {\r\n                            alert.show(\"Da die Datei keinen Header mit dem Namen \\\"Date\\\" enhält wird angenommen das die erste Spalte die Datumsspalte ist. Falls dies nicht korrekt ist füge bitte den korrekten Header hinzu.\", {\r\n                                title: \"\",\r\n                                closeCopy: \"\",\r\n                                actions: [{\r\n                                    copy: \"Okay\",\r\n                                    onClick: () => {\r\n                                        //Add provisional Headers\r\n                                        tempCharts.push({\r\n                                            name: file.name,\r\n                                            grouped: false,\r\n                                            basechart: new Basechart(),\r\n                                            headers: result.meta.fields,\r\n                                            provisionalHeaders: result.meta.fields.map((fieldName, index) => {\r\n                                                if (index === 0) {\r\n                                                    return \"Date\";\r\n                                                } else {\r\n                                                    return \"Column \" + index + \"/ \" + fieldName;\r\n                                                }\r\n                                            }),\r\n                                            preview: result.data,\r\n                                            nickname: file.name,\r\n                                            selectedRows: []\r\n                                        })\r\n                                        resolve();\r\n                                    }\r\n                                }]\r\n                            })\r\n                            return;\r\n                        } else {\r\n                            tempCharts.push({\r\n                                name: file.name,\r\n                                grouped: false,\r\n                                basechart: new Basechart(),\r\n                                headers: result.meta.fields,\r\n                                preview: result.data,\r\n                                nickname: file.name,\r\n                                selectedRows: []\r\n                            })\r\n                            resolve();\r\n                        }\r\n\r\n                    }\r\n                })\r\n            })\r\n            promises.push(filePromise);\r\n        })\r\n        Promise.all(promises).then(() => setBasecharts(tempCharts))\r\n    }, [files])\r\n    useEffect(() => isDoneButtonDisabled(), [basecharts])\r\n    useEffect(() => {\r\n        setStep(0);\r\n        setBasecharts([]);\r\n        setDoneButtonEnabled(false);\r\n    }, [open])\r\n    //</editor-fold>\r\n\r\n\r\n    //<editor-fold desc=\"helpers\">\r\n    const handleNext = () => {\r\n        if (step === basecharts.length - 1) {\r\n            return;\r\n        }\r\n        setStep((prevActiveStep) => prevActiveStep + 1);\r\n    };\r\n    const handleBack = () => {\r\n        if (step === 0) {\r\n            return;\r\n        }\r\n        setStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n\r\n    function updateGrouped(event) {\r\n        let copy = _.clone(basecharts);\r\n        copy[step].grouped = event.target.checked;\r\n        copy[step].selectedRows = [];\r\n        setBasecharts(copy);\r\n    }\r\n\r\n    function dialogDone() {\r\n        setOpen(false);\r\n\r\n        for (let i = 0; i < basecharts.length; i++) {\r\n            basecharts[i].file = files[i];\r\n            basecharts[i].uploadProgress = 0;\r\n        }\r\n        onDone(basecharts);\r\n    }\r\n\r\n    function dialogClose() {\r\n        setOpen(false);\r\n    }\r\n\r\n    function handleNicknameChange(event) {\r\n        let copy = _.clone(basecharts);\r\n        basecharts[step].nickname = event.target.value;\r\n        setBasecharts(copy);\r\n    }\r\n\r\n    function isDoneButtonDisabled() {\r\n\r\n        setDoneButtonEnabled(_.every(basecharts, x => {\r\n            if (x.grouped) {\r\n                return x.selectedRows.CLOSE && x.selectedRows.OPEN && x.selectedRows.HIGH && x.selectedRows.LOW;\r\n            }\r\n            return x.selectedRows.length !== 0;\r\n        }));\r\n    }\r\n\r\n\r\n    //</editor-fold>\r\n\r\n    function getTableRow() {\r\n        if (basecharts[step].provisionalHeaders) {\r\n            console.log(\"b\", basecharts[step])\r\n            return basecharts[step].provisionalHeaders.map(header => <TableCell>{header}</TableCell>)\r\n        } else {\r\n            return basecharts[step].headers.map(header => <TableCell>{header}</TableCell>)\r\n        }\r\n    }\r\n\r\n//<editor-fold desc=\"render helpers\">\r\n    function buildTable() {\r\n        return <TableContainer>\r\n            <Table style={{height: \"200px\"}}>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {getTableRow()}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {basecharts[step].preview.map(row => {\r\n                        return <TableRow>{\r\n                            basecharts[step].headers.map((header, index) => {\r\n\r\n                                return <TableCell>{row[header] ?? \"\"}</TableCell>;\r\n                            })\r\n                        }</TableRow>\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    }\r\n\r\n    function renderCellAutocomplete(label: string, multiple: boolean) {\r\n        return <Autocomplete\r\n            options={basecharts[step].headers}\r\n            value={multiple ? basecharts[step].selectedRows : basecharts[step].selectedRows[label]}\r\n            onChange={(event, value, reason) => {\r\n                let basechartsCopy = Array.from(basecharts)\r\n                if (multiple) {\r\n                    basecharts[step].selectedRows = value;\r\n                } else {\r\n                    basecharts[step].selectedRows[label] = value;\r\n                }\r\n                setBasecharts(basechartsCopy);\r\n            }}\r\n            multiple={multiple}\r\n            renderInput={(params) => (\r\n                <TextField_Component other={params} label={label} variant={\"outlined\"} fullWidth/>\r\n            )}\r\n        />;\r\n    }\r\n\r\n    function renderGroupSelector() {\r\n        return <>\r\n            <Grid item xs={3}>\r\n                {renderCellAutocomplete(\"OPEN\", false)}\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n                {renderCellAutocomplete(\"HIGH\", false)}\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n                {renderCellAutocomplete(\"LOW\", false)}\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n                {renderCellAutocomplete(\"CLOSE\", false)}\r\n            </Grid>\r\n        </>\r\n    }\r\n\r\n    //</editor-fold>\r\n    //mark: render\r\n    return <Dialog\r\n        BackdropProps={{style: {zIndex: \"-3\"}}}\r\n        onBackdropClick={() => setOpen(false)}\r\n        classes={{paper: classes.paper, root: {padding: \"80px 40px\"}}}\r\n        fullWidth\r\n        open={open}\r\n        fullScreen\r\n    >\r\n        <DialogTitle>\r\n            <Box display={\"flex\"} flexDirection={\"row\"} style={{justifyContent: \"space-between\"}} alignItems={\"center\"}>\r\n                {basecharts.length > 0 ? <Typography variant={\"h2\"}>{basecharts[step].name}</Typography> :\r\n                    <Skeleton height={80}/>}\r\n                <DialogActions>\r\n                    <Button fullWidth={true} onClick={dialogClose} variant={\"text\"}\r\n                            color={\"primary\"}>Abbrechen</Button>\r\n                    <Button className={classes.doneButton} disabled={!doneButtonEnabled} fullWidth={true}\r\n                            onClick={dialogDone} variant={\"contained\"}\r\n                            color={\"primary\"}>Fertig</Button>\r\n                </DialogActions>\r\n            </Box>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n            {basecharts.length > 0 ? <Box display={\"flex\"} flexDirection={\"column\"}>\r\n                <div style={{marginTop: \"2rem\"}}>\r\n                    <Typography variant={\"subtitle2\"}>Vorschau</Typography>\r\n                    <Typography variant={\"caption\"}>Falls die Datei keinen Header hat können die Spalten nicht mehr\r\n                        eindeutig identifiziert werden. Füge also bitte noch einen hinzu!</Typography>\r\n                    {buildTable()}\r\n                </div>\r\n                <div style={{marginTop: \"4rem\"}}>\r\n                    <Typography variant={\"subtitle2\"}>Ausgewähle Reihen</Typography>\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={basecharts[step].grouped} onChange={updateGrouped} color={\"primary\"}\r\n                                           name=\"checkedA\"/>}\r\n                        label=\"Gruppen Basischart\"\r\n                    />\r\n                    <Grid container spacing={2}>\r\n                        {basecharts[step].grouped ?? false ? renderGroupSelector() : <Grid item xs={12}>\r\n                            {renderCellAutocomplete(\"Ausgewähle Felder\", true)}\r\n                        </Grid>}\r\n                    </Grid>\r\n                </div>\r\n                <div style={{marginTop: \"2rem\"}}>\r\n                    <Typography variant={\"subtitle2\"}>Anderes</Typography>\r\n                    <TextField_Component value={basecharts[step].nickname ?? \"\"} label={\"Spitzname\"}\r\n                                         placeholder={basecharts[step].name} onChange={handleNicknameChange}/>\r\n                </div>\r\n            </Box> : <div>\r\n                <Typography variant={\"h1\"}>Lade Files.</Typography>\r\n                <Typography variant={\"body1\"}>Falls eines der Dateien über 50MB hat kann das eine Weile\r\n                    dauern.</Typography>\r\n            </div>}\r\n        </DialogContent>\r\n        {basecharts.length > 1 ? <MobileStepper\r\n            activeStep={step}\r\n            backButton={<Button size={\"small\"} onClick={handleBack}>Back</Button>}\r\n            nextButton={<Button size={\"small\"} onClick={handleNext}>Next</Button>}\r\n            steps={(files ?? []).length}\r\n            position={\"static\"}\r\n            variant={\"dots\"}\r\n        /> : <></>}\r\n    </Dialog>\r\n\r\n}\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\dataDisplay\\Table_Component.jsx",["378"],"import React, {useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {LightTheme} from \"../../themes/theme\";\r\nimport {DeleteRounded} from '@material-ui/icons'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nconst _ = require(\"lodash\");\r\n\r\nconst theme = LightTheme;\r\nconst useStyles = makeStyles((/*theme*/) => ({\r\n    table: {},\r\n    headerRow: {\r\n        padding: 10,\r\n        fontWeight: \"bold\",\r\n    },\r\n    row: {\r\n        backgroundColor: theme.palette.background.default,\r\n        borderRadius: 10,\r\n    },\r\n    cell: {\r\n        padding: \"15px\",\r\n        borderRadius: 10,\r\n        marginRight: 20,\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    spacer: {\r\n        paddingRight: 50,\r\n\r\n    },\r\n    indicators: {\r\n        fontFamily: \"Courier New\",\r\n        fontWeight: \"bold\",\r\n\r\n    },\r\n    combinations: {\r\n        color: theme.palette.primary.main,\r\n        fontSize: 30,\r\n        fontWeight: \"bold\",\r\n    },\r\n    baseChart: {\r\n        fontFamily: \"Courier New !important\",\r\n        fontWeight: \"bold\",\r\n\r\n    }\r\n}));\r\n/**\r\n * @component\r\n * @param settings\r\n *          Settings for Table, structured like this:\r\n *          Headers:\r\n *              @param name: Headertitle to display\r\n *              @param id: Data columnnime corresponding to Header, can be split with \".\"\r\n *      Data:\r\n *              @param can be everything\r\n * @param deletable\r\n *          if rows are deletable\r\n * @param onDelete\r\n *      @fires onDelete     deletes rows\r\n * @param onBlur\r\n *      @fires updates in database on textfield blur\r\n * @returns {*}\r\n * @constructor\r\n */\r\n\r\nexport const CustomTable_Component = ({settings, deletable, onDelete, onBlur, actions}) => {\r\n    //mark: hooks\r\n    const classes = useStyles();\r\n\r\n    //mark: render\r\n    if(!_.isArray(settings.data)){\r\n        settings.data = [settings.data];\r\n    }\r\n\r\n    function getValue(header, d) {\r\n        if(header.id.includes(\".\")){\r\n            if(!d[header.id.split(\".\")[0]]){\r\n                return \"\";\r\n            }\r\n            return d[header.id.split(\".\")[0]][header.id.split(\".\")[1]]\r\n        }else {\r\n            return d[header.id];\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <table className={classes.table}>\r\n            <thead>\r\n            <tr key={\"header\"} className={classes.headerRow}>\r\n                {settings.header.map((header) => {\r\n                    return <>\r\n                        <td>{header.name}</td>\r\n                        <td className={classes.spacer}/>\r\n                    </>\r\n                })}\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {settings.data.map(d => {\r\n                if(!d){return <></>}\r\n                return (<>\r\n                    <tr key={d._id}>\r\n                        {settings.header.map((header) => {\r\n                            if(!header){return <></>}\r\n                            return <TableField\r\n                                data={d}\r\n                                onBlur={onBlur ? (value) => onBlur(value, d, header.id) : null}\r\n                                classes={classes}\r\n                                defaultValue={getValue(header, d)}\r\n                                type={\"text\"}\r\n                                editable={false}\r\n                            />\r\n                        })}\r\n                        <Grid container spacing={2} direction={\"row\"} wrap={\"nowrap\"}>\r\n                            {\r\n                                actions.map(x => {\r\n                                    return <Grid item>\r\n                                        <IconButton size={\"medium\"} onClick={() => x.onClick(d._id)}>{x.icon(d)}</IconButton>\r\n                                    </Grid>\r\n                                })\r\n\r\n                            }\r\n                        </Grid>\r\n                    </tr>\r\n                    <tr key={\"spacer\"} className={classes.spacer}/>\r\n                </>);\r\n            })}\r\n            </tbody>\r\n        </table>\r\n    </>\r\n}\r\ntype TableFieldProps = {\r\n    defaultValue: string;\r\n    classes: any;\r\n    editable?: boolean;\r\n    type: any;\r\n    onBlur: any;\r\n}\r\nexport const TableField = (props: TableFieldProps) => {\r\n    const [value, setValue] = useState(props.defaultValue);\r\n\r\n\r\n    return <>\r\n        <td style={{width: \"450px\"}}\r\n            className={[props.classes.cell, props.classes.indicators].join(\" \")}>\r\n            <input onBlur={props.onBlur ? () => props.onBlur(value) : null}\r\n                   disabled={props.editable}\r\n                   readOnly={!props.onBlur}\r\n                   onChange={event => {\r\n                       setValue(event.target.value)\r\n                   }} value={value}/></td>\r\n        <td className={props.classes.spacer}/>\r\n    </>\r\n};\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\inputs\\TimeInput_Component.jsx",["379"],"import React, {useEffect, useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {LightTheme} from \"../../themes/theme\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst theme = LightTheme;\r\nconst useStyles = makeStyles((/*theme*/) => ({\r\n    root: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    },\r\n    timeUnits: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n    },\r\n    timeSlot: {\r\n        borderColor: theme.palette.text.secondary,\r\n        borderStyle: \"solid\",\r\n        width: 50,\r\n        height: 50,\r\n        borderRadius: 5,\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        transition: \"all 0.5s ease\",\r\n        margin: 10,\r\n        \"&:hover\": {\r\n            boxShadow: \"0 0 10px 1px \" + theme.palette.shadowColor.main,\r\n        }\r\n    }\r\n}));\r\n\r\nexport const TimeInput_Component = ({timeunit, onChange, readOnly}) => {\r\n    //mark: hooks\r\n    const classes = useStyles();\r\n    //mark: states\r\n    const [selected, setselected] = useState(timeunit ?? \"M\");\r\n    //mark: default vars\r\n    //TODO: Put somewhere else - should not be hidden in this component!\r\n    const timeFormats = [\"M\", \"W\", \"D\", \"h\", \"m\", \"s\", \"ms\"];\r\n\r\n    //<editor-fold desc=\"lifecycle\">\r\n    useEffect(() => {\r\n        onChange(selected)\r\n    }, [selected])\r\n    //</editor-fold>\r\n\r\n    //mark: render\r\n    return <div className={classes.root}>\r\n        <Typography variant={\"caption\"}>Masterzeiteinheit auswählen</Typography>\r\n        <div className={classes.timeUnits}>\r\n            {\r\n                timeFormats.map(value => {\r\n                    return <div onClick={readOnly ? null : () => setselected(value)} style={selected === value ? {\r\n                        borderColor: theme.palette.primary.main,\r\n                        color: theme.palette.primary.main\r\n                    } : {}}\r\n                                className={classes.timeSlot}><Typography style={selected === value ? {\r\n                        fontWeight: \"bold\",\r\n                        color: theme.palette.primary.main\r\n                    } : {}}>{value}</Typography></div>\r\n                })\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\dialogs\\ChartPreviewDialog_Component.jsx",["380","381","382"],"import React, {useEffect, useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {\r\n    Button,\r\n    CircularProgress,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle, MenuItem, TextField,\r\n    Typography, useTheme\r\n} from \"@material-ui/core\";\r\nimport {getFile} from \"../../service/backendServices/ProjectService\";\r\nimport {ResponsiveLineCanvas} from \"@nivo/line\";\r\nimport {useStore} from \"react-redux\";\r\nimport {Indicator} from \"../../objects/project\";\r\nimport {getIndicatorFile} from \"../../service/backendServices/IndicatorService\";\r\n\r\nconst _ = require(\"lodash\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    contentRoot: {\r\n        padding: 40, overflowY: \"scroll\"\r\n    }\r\n}));\r\nconst ChartPreviewDialog_Component = ({projectId, basechartId, open, setOpen, indicatorId}) => {\r\n    //MARK: Hooks\r\n    const classes = useStyles();\r\n    const store = useStore().getState();\r\n    const theme = useTheme();\r\n\r\n    //MARK: States\r\n    const [data, setData] = useState([]);\r\n    const [fields, setFields] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [selectedIndicatorFile, setSelectedIndicatorFile] = useState(null);\r\n\r\n    //Selectors\r\n    let indicator: Indicator;\r\n    if (indicatorId && projectId) indicator = store.projects[projectId].project.indicator?.find(i => i._id === parseInt(indicatorId));\r\n\r\n\r\n    //<editor-fold desc=\"Lifecycle\">\r\n    useEffect(() => {\r\n        if (basechartId) {\r\n            setData([]);\r\n            setFields([]);\r\n            setError(null);\r\n            getFile(basechartId).then(r => transformData(r)).catch(e => {\r\n                console.error(e);\r\n                setError({message: \"There was a error while fetching the file!\", description: e.response.data.message})\r\n            });\r\n        }\r\n        if (indicatorId) {\r\n            setData([]);\r\n            setFields([]);\r\n            setError(null);\r\n            setSelectedIndicatorFile(null)\r\n        }\r\n\r\n    }, [open])\r\n\r\n    useEffect(() => {\r\n        setData([]);\r\n        setFields([]);\r\n        setError(null);\r\n        if (!indicator) {\r\n            return;\r\n        }\r\n        const basechartId = indicator.basechart._id;\r\n        if (basechartId && selectedIndicatorFile) {\r\n            getFile(basechartId).then(fileResponse => {\r\n                getIndicatorFile(selectedIndicatorFile).then(indicatorResponse => transformData(fileResponse, basechartId, indicatorResponse)).catch(e => {\r\n                    console.error(e);\r\n                    setError({\r\n                        message: \"There was a error while fetching the file!\",\r\n                        description: e.response?.data.message\r\n                    })\r\n                })\r\n            }).catch(e => {\r\n                console.error(e);\r\n                setError({message: \"There was a error while fetching the file!\", description: e.response?.data.message})\r\n            });\r\n\r\n        }\r\n\r\n    }, [selectedIndicatorFile])\r\n    //</editor-fold>\r\n\r\n    const transformData = (data, bcId, indicatorData) => {\r\n        const Papa = require(\"papaparse\");\r\n        const papaConfig = {\r\n            header: true,\r\n            fastMode: true,\r\n            complete: (result) => {\r\n                const basechart = store.projects[projectId].project.basecharts.find(basechart => basechart._id === (bcId ? bcId : basechartId))\r\n                console.log(\"basechart: \", basechart)\r\n                let resultData = [];\r\n                resultData = basechart.columns.map(column => {\r\n                    return {\r\n                        id: column,\r\n                        color: theme.palette.primary.main,\r\n                        data: result.data.filter(x => !_.isNaN(parseFloat(x[column]))).map((x, i) => {\r\n                            const dateRow = x[result.meta.fields[0]];\r\n                            const valueRow = parseFloat(x[column])\r\n                            return {\r\n                                x: dateRow,\r\n                                y: valueRow\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n                setData(resultData);\r\n                if (bcId) transformIndicatorData(indicatorData, resultData)\r\n                setFields(result.meta.fields);\r\n            }\r\n        }\r\n        Papa.parse(data, papaConfig)\r\n    }\r\n    const transformIndicatorData = (indicatorData, data) => {\r\n        if (!data) {\r\n            return\r\n        }\r\n        indicatorData = indicatorData.split(\"\\n\");\r\n        const xAxe = data[0].data.map(row => row.x);\r\n        const resultData = [];\r\n        const difference = xAxe.length - indicatorData.length;\r\n        xAxe.forEach((xItem, index) => {\r\n            if(index < difference) return\r\n            if (_.isNaN(parseFloat(indicatorData[index-difference]))) return\r\n            resultData.push({\r\n                x: xItem,\r\n                y: parseFloat(indicatorData[index-difference])\r\n            })\r\n        })\r\n\r\n        setData([...data, {id: \"indicator\", data: resultData}])\r\n    }\r\n\r\n\r\n    function renderBasechartGraph() {\r\n        return error ? <div>\r\n                <Typography>{error.message}</Typography>\r\n                <Typography>{error.description}</Typography>\r\n            </div> :\r\n            data.length === 0 ? <h1>Loading...</h1> :\r\n                    <div style={{width: \"400%\", height: \"100%\"}}>\r\n                        <ResponsiveLineCanvas\r\n                            data={data}\r\n                            margin={{top: 50, right: 140, bottom: 50, left: 50}}\r\n                            enablePoints={false}\r\n                            lineWidth={2}\r\n                            curve={\"linear\"}\r\n                            colors={{scheme: \"red_blue\"}}\r\n                            enableGridX={false}\r\n                            enableGridY={true}\r\n                            useMesh={true}\r\n                            axisBottom={{\r\n                                tickValues: data[0].data.filter((x, i) => i % 10 === 0).map(x => x.x),\r\n                                orient: 'left',\r\n                                tickSize: 5,\r\n                                tickPadding: 5,\r\n                                tickRotation: 90,\r\n                                legend: 'Datum',\r\n                                legendOffset: -35,\r\n                                legendPosition: 'left'\r\n                            }}\r\n                            legends={[\r\n                                {\r\n                                    anchor: 'bottom-left',\r\n                                    direction: 'column',\r\n                                    justify: false,\r\n                                    translateX: 0,\r\n                                    translateY: -10,\r\n                                    itemSpacing: 2,\r\n                                    itemDirection: 'left-to-right',\r\n                                    itemWidth: 80,\r\n                                    itemHeight: 12,\r\n                                    itemOpacity: 0.75,\r\n                                    symbolSize: 12,\r\n\r\n                                }\r\n                            ]}\r\n                        /></div>\r\n    }\r\n\r\n    function renderIndicatorGraphWithChooser() {\r\n        if (indicator) {\r\n            return <TextField onChange={e => setSelectedIndicatorFile(e.target.value)} variant={\"outlined\"} fullWidth\r\n                              label={\"Indikatorvariante auswählen.\"}\r\n                              helperText={\"Wähle eine Variante aus um sie als Graph anzusehen.\"} select>\r\n                {indicator.paths.map(path =>\r\n                    <MenuItem key={path} value={path}>{path}</MenuItem>)}\r\n            </TextField>;\r\n        } else {\r\n            return <CircularProgress/>\r\n        }\r\n    }\r\n\r\n    function renderChooserOrGraph() {\r\n        if (indicatorId && data.length !== 0) {\r\n            return renderBasechartGraph();\r\n        }\r\n\r\n        if (indicatorId) {\r\n            return renderIndicatorGraphWithChooser()\r\n        }\r\n\r\n        if (data.length !== 0) {\r\n            return renderBasechartGraph();\r\n        }\r\n    }\r\n\r\n    return <Dialog className={classes.dialogRoot} open={open} onClose={setOpen} fullScreen>\r\n        <DialogTitle style={{paddingTop: 40}}>\r\n            <Typography variant={\"h1\"}>Vorschau</Typography>\r\n        </DialogTitle>\r\n        <DialogContent className={classes.contentRoot}>\r\n            {renderChooserOrGraph()}\r\n        </DialogContent>\r\n        <DialogActions>\r\n            {indicator && selectedIndicatorFile ?\r\n                <Button variant={\"contained\"} color={\"secondary\"} onClick={() => setSelectedIndicatorFile(null)}>Zurück\r\n                    zur Auswahl</Button> : <div/>}\r\n            <Button variant={\"contained\"} color={\"primary\"} onClick={() => setOpen(false)}>Schließen</Button>\r\n        </DialogActions>\r\n    </Dialog>\r\n}\r\nexport default ChartPreviewDialog_Component\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\dialogs\\AddIndicatorDialog_Component.jsx",["383","384","385","386","387"],"import React, {useEffect, useState} from \"react\";\r\nimport {makeStyles, useTheme} from \"@material-ui/styles\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport {Basechart, Indicator, Project} from \"../../objects/project\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {TextField_Component} from \"../inputs/TextField_Component\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport {IndicatorCreator_Component} from \"../inputs/IndicatorCreator_Component\";\r\nimport {Indicator_Component} from \"../dataDisplay/Indicator_Component\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport {AddRounded} from \"@material-ui/icons\";\r\nimport {Status} from \"../../objects/enums/status.enum\";\r\nimport {connect} from \"react-redux\";\r\nimport {IndicatorTemplate} from \"../../objects/enums/indicatorTemplate\";\r\nimport {Box} from \"@material-ui/core\";\r\n\r\n//<editor-fold desc=\"Overhead\">\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        padding: \"40px 20px\",\r\n        zIndex: 0,\r\n        minWidth: \"90vw\"\r\n    },\r\n    button: {\r\n        marginTop: 20,\r\n        height: 50,\r\n        width: 250,\r\n        borderRadius: 10,\r\n        fontSize: 15,\r\n        fontWeight: \"bolder\",\r\n    },\r\n    topDialog: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"space-between\",\r\n        paddingTop: 20,\r\n        paddingBottom: 20,\r\n    },\r\n    line: {\r\n        height: 80,\r\n        marginLeft: 40,\r\n        zIndex: -1,\r\n        width: 5,\r\n        backgroundColor: theme.palette.text.secondary,\r\n        marginBottom: -20\r\n    },\r\n    plus: {\r\n        marginBottom: 0,\r\n        marginTop: -100,\r\n        marginLeft: 22,\r\n        transition: \"all .55s ease\",\r\n        opacity: 1,\r\n        \"&:hover\": {\r\n            opacity: 1\r\n        }\r\n    },\r\n    basechart: {\r\n        padding: 20,\r\n        backgroundColor: theme.palette.background.default,\r\n        borderRadius: 10,\r\n    },\r\n    root: {padding: \"80px 40px\"},\r\n}));\r\ntype DialogProps = {\r\n    open: boolean,\r\n    setOpen: Function,\r\n    project: Project,\r\n    onDone: Function,\r\n    indicatorTypes: IndicatorTemplate[],\r\n};\r\n//</editor-fold>\r\nconst AddIndicatorDialog_Component = (props: DialogProps) => {\r\n    //MARK: hooks & requires\r\n    const _ = require(\"lodash\");\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    //MARK: states\r\n    const [selectedBasechart, setBasechart] = useState();\r\n    const [indicators, setIndicators] = useState([]);\r\n    const [dropdownError, setDropdownError] = useState();\r\n    const [indicatorError, setIndicatorError] = useState();\r\n\r\n    //Not used right now\r\n    //const [indicatorTitleError, setIndicatorTitleError] = useState();\r\n    //const [indicatorTitle, setIndicatorTitle] = useState();\r\n\r\n    useEffect(() => {\r\n        setIndicatorError(null);\r\n        setDropdownError(null);\r\n        setIndicators([]);\r\n        setBasechart(null);\r\n    }, [props.open])\r\n\r\n\r\n\r\n    //<editor-fold desc=\"helpers\">\r\n    function handleCreateNew(index) {\r\n        setIndicatorError(null);\r\n        let copyOfIndicators = Array.from(indicators);\r\n        copyOfIndicators = _.remove(copyOfIndicators, (n) => n.building === false);\r\n        copyOfIndicators.splice(index, 0, {building: true,})\r\n        setIndicators(copyOfIndicators);\r\n    }\r\n    function onCreate(indicator) {\r\n        setIndicatorError(null);\r\n        let copyOfIndicators = Array.from(indicators);\r\n        const indexOfBuilder = copyOfIndicators.findIndex(value => value.building === true);\r\n        if(!indicator){\r\n            _.pullAt(copyOfIndicators, [indexOfBuilder])\r\n        }else {\r\n            copyOfIndicators = _.remove(copyOfIndicators, (n) => n.building === false);\r\n            copyOfIndicators.length === 0 ? indicator._id = 1 : indicator._id = (_.last(copyOfIndicators)._id) + 1;\r\n            copyOfIndicators.splice(indexOfBuilder, 0, indicator);\r\n            //Add name of bottom indicator to be referenced.\r\n            setBasechart(Object.assign({}, selectedBasechart, {columns: [...selectedBasechart.columns, indicator.indicatorReferenceName]}))\r\n            console.log(selectedBasechart);\r\n        }\r\n        setIndicators(copyOfIndicators);\r\n    }\r\n    function handleDelete(index) {\r\n        let copyOfIndicators = Array.from(indicators);\r\n        _.pullAt(copyOfIndicators, index);\r\n        setIndicators(copyOfIndicators);\r\n    }\r\n    function handleCreateIndicator() {\r\n        if (!selectedBasechart) {\r\n            setDropdownError(\"Du hast noch kein Basischart ausgewählt.\")\r\n            return;\r\n        }\r\n        if (!indicators || indicators.filter(v => v.building === false).length === 0) {\r\n            setIndicatorError(\"Noch keine Indikatoren konfiguriert.\")\r\n            return;\r\n        }\r\n        if (!indicatorError && !dropdownError) {\r\n            createIndicatorString();\r\n        }\r\n    }\r\n    function createIndicatorString() {\r\n        let indicatorString = \"\";\r\n        indicators.forEach(value => {\r\n            //TODO: Upgrade backend parser with new string\r\n            indicatorString += `${value.indicatorType.name}(`\r\n            //indicatorString += `${value.indicatorType.name}/${value.indicatorReferenceName}(`\r\n        })\r\n        indicatorString += \"$BASECHART$()\";\r\n        indicators.reverse();\r\n        indicators.forEach(value => {\r\n            indicatorString += \")[\" + value.parameters.map(v => v.value).join(\",\") + \"]\"\r\n            if (_.isArrayLike(value.selectedColumn)) {\r\n                indicatorString += \"::\" + value.selectedColumn.join(\"::\")\r\n            } else {\r\n                indicatorString += \"::\" + value.selectedColumn\r\n            }\r\n        });\r\n        let indicator = new Indicator(indicatorString, 0, selectedBasechart, Status.waiting);\r\n        props.onDone(indicator);\r\n    }\r\n    function handleDropdownChange(event) {\r\n        setDropdownError(null);\r\n        setBasechart(props.project.basecharts.find(value => value.chartname === event.target.value));\r\n    }\r\n    //</editor-fold>\r\n\r\n    //<editor-fold desc=\"render\">\r\n    return <Dialog\r\n        BackdropProps={{style: {zIndex: \"-3\"}}}\r\n        onBackdropClick={() => props.setOpen(false)}\r\n        classes={{paper: classes.paper, root: classes.root}}\r\n        fullWidth\r\n        open={props.open}\r\n    >\r\n        <DialogTitle>\r\n            <Typography variant={\"h2\"}>\r\n                <Box alignItems={\"space-between\"} justifyContent={\"space-between\"} display={\"flex\"} flexDirection={\"row\"}>\r\n                    <span>Indikatorenkombination<span style={{color: theme.palette.primary.main}}> erstellen.</span></span>\r\n                    <Button size={\"medium\"} variant={\"outlined\"} onClick={() => props.setOpen(false)}>Abbrechen</Button>\r\n                </Box>\r\n            </Typography>\r\n            <div className={classes.topDialog}>\r\n                <div\r\n                    style={{marginRight: 20, flexGrow: 1}}\r\n                >\r\n                    <TextField_Component\r\n                        onChange={handleDropdownChange}\r\n                        className={classes.field}\r\n                        notWhite\r\n                        error={dropdownError}\r\n                        helperText={dropdownError}\r\n                        fullWidth\r\n                        label={\"Basischart\"}\r\n                        placeholder={\"Basischart auswählen...\"}\r\n                        selectItems={props.project.basecharts ? props.project.basecharts.map(value => {\r\n                            return <MenuItem key={value.chartname} value={value.chartname}>\r\n                                {value.nickname}\r\n                            </MenuItem>;\r\n                        }) : null}\r\n                    />\r\n                </div>\r\n                <Button disabled={indicators.length === 0} className={classes.button} onClick={handleCreateIndicator} color={\"primary\"}\r\n                        variant={\"contained\"}>Erstellen</Button>\r\n            </div>\r\n            <Typography variant={\"caption\"}>{indicatorError}</Typography>\r\n        </DialogTitle>\r\n        {selectedBasechart ? <DialogContent style={{overflowX: \"scroll\"}}>\r\n            {indicators.length === 0 ? <span/> : <span><div className={classes.line}/>\r\n                <Fab size={\"small\"} color={\"primary\"} onClick={() => handleCreateNew(0)}\r\n                     className={[classes.plus].join(\" \")}><AddRounded/></Fab></span>}\r\n            {\r\n                indicators.length === 0 ?\r\n                    <IndicatorCreator_Component selectedBasechart={selectedBasechart}\r\n                                                indicatorTypes={props.indicatorTypes} createCallback={onCreate} isFirstOne={true}/> :\r\n                    indicators.map((value, index) => {\r\n                        if (value.building) {\r\n                            return <IndicatorCreator_Component selectedBasechart={selectedBasechart}\r\n                                                               indicatorTypes={props.indicatorTypes}\r\n                                                               createCallback={onCreate} isFirstOne={false}/>\r\n                        } else {\r\n                            return <Indicator_Component indicator={value} onCreateNew={() => handleCreateNew(index + 1)}\r\n                                                        onDelete={() => handleDelete(index)}/>\r\n                        }\r\n                    })\r\n            }\r\n            <div className={classes.basechart}>\r\n                <Typography variant={\"h2\"}>Basechart: <span\r\n                    style={{color: theme.palette.primary.main}}>{selectedBasechart?.nickname}</span></Typography>\r\n            </div>\r\n        </DialogContent> : <span/>}\r\n    </Dialog>\r\n    //</editor-fold>\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        indicatorTypes: state.indicators.filter((value: IndicatorTemplate) => value.basechart !== null)\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(AddIndicatorDialog_Component)\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\dataDisplay\\Indicator_Component.jsx",["388","389","390","391","392"],"import React from \"react\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {TextField_Component} from \"../inputs/TextField_Component\";\r\nimport {AddRounded, CloseRounded} from \"@material-ui/icons\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Typography} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    indicatorRoot: {\r\n        backgroundColor: theme.palette.background.default,\r\n        borderRadius: 10,\r\n        padding: \"20px\",\r\n        marginTop: -20,\r\n        zIndex: 2,\r\n    },\r\n    line: {\r\n        height: 80,\r\n        marginLeft: 40,\r\n        zIndex: -1,\r\n        width: 5,\r\n        backgroundColor: theme.palette.text.secondary,\r\n        marginBottom: -20\r\n    },\r\n    plus: {\r\n        marginBottom: 0,\r\n        marginTop: -60,\r\n        marginLeft: 22,\r\n        transition: \"all .55s ease\",\r\n        opacity: 0,\r\n        \"&:hover\": {\r\n            opacity: 1\r\n        }\r\n    },\r\n    content: {\r\n        overflowY: \"scroll\",\r\n        height: 100,\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"normal\",\r\n    }\r\n}));\r\n\r\ntype Indicator_ComponentProps = {\r\n    indicator: any,\r\n    onCreateNew: Function,\r\n    onDelete: Function,\r\n}\r\nexport const Indicator_Component = (props: Indicator_ComponentProps) => {\r\n    //mark: hooks\r\n    const classes = useStyles();\r\n\r\n    //mark: render\r\n    return <div>\r\n        <div className={classes.indicatorRoot} style={{zIndex: \"1\"}}>\r\n            <Typography variant={\"h2\"}>{props.indicator.indicatorReferenceName}</Typography>\r\n            <Grid container spacing={1} direction=\"row\">\r\n                <Grid item>\r\n                    <TextField_Component readOnly defaultValue={props.indicator.indicatorType.name} label={\"Indikatorname\"}/>\r\n                </Grid>\r\n                <Grid item>\r\n                    <TextField_Component readOnly defaultValue={props.indicator.selectedColumn} label={\"Spalte\"}/>\r\n                </Grid>\r\n                {props.indicator.parameters.map(value => {\r\n                    return <Grid item>\r\n                        <TextField_Component readOnly defaultValue={value.value} label={value.name}/>\r\n                    </Grid>\r\n                })}\r\n                <Grid item style={{marginLeft: \"auto\"}}>\r\n                    <IconButton onClick={props.onDelete}><CloseRounded/></IconButton>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n        <div className={classes.line}/>\r\n    </div>\r\n}\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\inputs\\IndicatorCreator_Component.jsx",["393","394","395","396","397","398"],"import React, {createRef, useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\nimport {TextField_Component} from \"./TextField_Component\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Basechart} from \"../../objects/project\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport {IndicatorTemplate} from \"../../objects/enums/indicatorTemplate\";\r\n\r\nconst _ = require(\"lodash\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        backgroundColor: theme.palette.background.default,\r\n        padding: 20,\r\n        borderRadius: 10,\r\n        display: \"flex\",\r\n        marginBottom: 40,\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\"\r\n    },\r\n    indicatorDefinitions: {\r\n        width: \"70%\",\r\n    },\r\n    descriptions: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        width: \"30%\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n    description: {\r\n        width: \"100%\",\r\n        overflowX: \"scroll\",\r\n        textAlign: \"center\",\r\n    },\r\n    button: {\r\n        marginTop: 20,\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n        height: 50,\r\n        width: 300,\r\n        borderRadius: 10,\r\n        fontSize: 15,\r\n        fontWeight: \"bolder\",\r\n    },\r\n}));\r\n\r\n\r\ntype IndicatorCreatorProps = {\r\n    indicatorTypes: IndicatorTemplate[],\r\n    createCallback: Function,\r\n    selectedBasechart: Basechart,\r\n    isFirstOne: boolean,\r\n};\r\n\r\nexport const IndicatorCreator_Component = (props: IndicatorCreatorProps) => {\r\n    //mark: hooks\r\n    const classes = useStyles();\r\n    //mark: states\r\n    const [selectedIndicator, setSelectedIndicator] = useState(null);\r\n    const [selectedColumn, setSelectedColumn] = useState([]);\r\n    const [indicatorReferenceName, setIndicatorReferenceName] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n    //mark: default vars\r\n    let refs: Map<any, any> = {};\r\n\r\n    //<editor-fold desc=\"helpers\">\r\n    function onCreate() {\r\n        if (!checkInputs()) {\r\n            setError(\"Indikator konnte nicht hinzugefügt werden, sind alle Felder ausgefüllt?\");\r\n            return\r\n        }\r\n        let indicatorParameters = []\r\n        console.log(refs);\r\n        _.forEach(refs, (value, key) => {\r\n            if(!value.value){return}\r\n            indicatorParameters.push({\r\n                name: key,\r\n                value: value.value === \"\" ? selectedIndicator.parameters.find(value1 => value1.name === key).value : value.value,\r\n                textfieldType: value.type\r\n            });\r\n        });\r\n        const indicator = {\r\n            building: false,\r\n            indicatorType: {...selectedIndicator},\r\n            parameters: indicatorParameters,\r\n            selectedColumn: selectedColumn,\r\n            selectedBasechart: props.selectedBasechart,\r\n            indicatorReferenceName: indicatorReferenceName,\r\n        }\r\n        props.createCallback(indicator);\r\n    }\r\n\r\n    function checkInputs() {\r\n        _.forEach(refs, (v, k) => {\r\n            if (v.value === \"\") {\r\n                return false;\r\n            }\r\n        })\r\n        if (indicatorReferenceName === \"\") {\r\n            return false;\r\n        }\r\n        if (!selectedIndicator) {\r\n            return false;\r\n        }\r\n        if (selectedColumn.length === 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function onCancel() {\r\n        props.createCallback();\r\n    }\r\n\r\n    function handleChange(e) {\r\n        setError(\"\");\r\n        const indicatorId = e.target.value;\r\n        setSelectedIndicator(props.indicatorTypes.find(value => value.name === indicatorId))\r\n    }\r\n\r\n    function handleIndicatorNameChange(e) {\r\n        setError(\"\");\r\n        const name = e.target.value;\r\n        setIndicatorReferenceName(name);\r\n    }\r\n\r\n    function getAutocompleteName(x) {\r\n        switch (x) {\r\n            case 0:\r\n                return \"OPEN\";\r\n            case 1:\r\n                return \"HIGH\";\r\n            case 2:\r\n                return \"LOW\";\r\n            case 3:\r\n                return \"CLOSE\";\r\n        }\r\n    }\r\n\r\n    function renderAutocomplete(value, onChange, name) {\r\n        return <Grid item xs={3}><Autocomplete\r\n            options={props.selectedBasechart.columns}\r\n            value={value}\r\n            onChange={(event, changeValue, reason) => {\r\n                //TODO: implement remove reason\r\n                onChange(changeValue)\r\n            }}\r\n            multiple={false}\r\n            renderInput={(params) => (\r\n                <TextField_Component other={params} label={name} variant={\"outlined\"} fullWidth/>\r\n            )}\r\n        /></Grid>;\r\n    }\r\n\r\n    function renderGroupedAutocomplete() {\r\n        return <Grid container spacing={2} direction={\"row\"}>\r\n            {\r\n                [0, 1, 2, 3].map((x) =>\r\n                    renderAutocomplete(selectedColumn[x], (value) => {\r\n                        setError(\"\")\r\n                        const selectedCols = _.cloneDeep(selectedColumn);\r\n                        selectedCols[x] = value;\r\n                        setSelectedColumn(selectedCols);\r\n                    }, getAutocompleteName(x)))\r\n            }\r\n        </Grid>\r\n    }\r\n\r\n    //</editor-fold>\r\n\r\n    //mark: renders\r\n    return <div className={classes.container}>\r\n        <div className={classes.indicatorDefinitions}>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={6}>\r\n                    <TextField_Component onChange={handleChange}\r\n                                         selectItems={props.indicatorTypes.map((value: IndicatorTemplate) => {\r\n                                             return <MenuItem key={value.name} value={value.name}>\r\n                                                 {value.name}\r\n                                             </MenuItem>\r\n                                         })} fullWidth label={\"Indikator\"}/>\r\n                    <TextField_Component onChange={handleIndicatorNameChange}\r\n                                         helperText={\"Keine Sonderzeichen! Nur Buchstaben und Zahlen!\"} fullWidth\r\n                                         label={\"Indikatorname\"} value={indicatorReferenceName}/>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    {selectedIndicator ?\r\n                        selectedIndicator.basechart.includes(\"grouped\") ?\r\n                            renderGroupedAutocomplete() :\r\n                            renderAutocomplete(selectedColumn[0], (value) => setSelectedColumn([value]), \"Ausgewählte Spalte\")\r\n                        : <div/>}\r\n                </Grid>\r\n            </Grid>\r\n            <Grid spacing={2} container className={classes.parameters}>\r\n                {selectedIndicator ? selectedIndicator.parameters.map(value => {\r\n                    //Create Refs for from and for to field!\r\n                    refs[value.name+\"-from\"] = (createRef())\r\n                    refs[value.name+\"-to\"] = (createRef())\r\n                    return <><Grid xs={3} item>\r\n                        <TextField_Component ref={element => refs[value.name + \"-from\"] = element}\r\n                                             placeholder={value.name}\r\n                                             label={\"(FROM) \" + value.description} type={value.textfieldType}/>\r\n                    </Grid>\r\n                        <Grid xs={3} item>\r\n                            <TextField_Component ref={element => refs[value.name + \"-to\"] = element}\r\n                                                 placeholder={value.name}\r\n                                                 label={\"(TO)\" + value.description} type={value.textfieldType}/>\r\n                        </Grid></>\r\n                }) : <div/>}\r\n            </Grid>\r\n\r\n        </div>\r\n        <div className={classes.descriptions}>\r\n            <Typography variant={\"body1\"} className={classes.description}>\r\n                {selectedIndicator ? selectedIndicator.description : \"Wähle zuerst einen Indikator aus den verfügbaren aus. \"}\r\n            </Typography>\r\n            <Button className={classes.button} onClick={onCreate} color={\"primary\"} variant={\"contained\"}>Indikator\r\n                hinzufügen</Button>\r\n            {!props.isFirstOne ? <Button className={classes.button} onClick={onCancel} color={\"primary\"}\r\n                                         variant={\"text\"}>Abbrechen</Button> : <div></div>}\r\n            {error !== \"\" ? <Typography variant={\"caption\"}>{error}</Typography> : <div></div>}\r\n        </div>\r\n    </div>\r\n}\r\n","C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\redux\\actions\\loading_actions.js",[],"C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\miscellaneous\\CreateProject_Component.jsx",[],"C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\cells\\HistoryCell_Component.jsx",[],"C:\\Users\\David Gangl\\Documents\\GitHub\\stockAnalysis\\src\\components\\cells\\ProjectTab_Component.jsx",[],{"ruleId":"399","replacedBy":"400"},{"ruleId":"401","replacedBy":"402"},{"ruleId":"403","severity":1,"message":"404","line":2,"column":41,"nodeType":"405","messageId":"406","endLine":2,"endColumn":51},{"ruleId":"403","severity":1,"message":"407","line":4,"column":8,"nodeType":"405","messageId":"406","endLine":4,"endColumn":20},{"ruleId":"403","severity":1,"message":"408","line":5,"column":9,"nodeType":"405","messageId":"406","endLine":5,"endColumn":14},{"ruleId":"403","severity":1,"message":"409","line":10,"column":9,"nodeType":"405","messageId":"406","endLine":10,"endColumn":18},{"ruleId":"410","severity":1,"message":"411","line":22,"column":8,"nodeType":"412","endLine":22,"endColumn":17,"suggestions":"413"},{"ruleId":"403","severity":1,"message":"409","line":4,"column":9,"nodeType":"405","messageId":"406","endLine":4,"endColumn":18},{"ruleId":"403","severity":1,"message":"414","line":7,"column":11,"nodeType":"405","messageId":"406","endLine":7,"endColumn":18},{"ruleId":"403","severity":1,"message":"415","line":2,"column":9,"nodeType":"405","messageId":"406","endLine":2,"endColumn":18},{"ruleId":"403","severity":1,"message":"416","line":3,"column":9,"nodeType":"405","messageId":"406","endLine":3,"endColumn":15},{"ruleId":"417","severity":1,"message":"418","line":93,"column":13,"nodeType":"419","endLine":94,"endColumn":49},{"ruleId":"417","severity":1,"message":"418","line":95,"column":13,"nodeType":"419","endLine":96,"endColumn":53},{"ruleId":"417","severity":1,"message":"418","line":98,"column":17,"nodeType":"419","endLine":99,"endColumn":57},{"ruleId":"420","severity":1,"message":"421","line":106,"column":55,"nodeType":"419","endLine":107,"endColumn":85},{"ruleId":"420","severity":1,"message":"421","line":109,"column":55,"nodeType":"419","endLine":110,"endColumn":85},{"ruleId":"422","severity":1,"message":"423","line":116,"column":13,"nodeType":"419","endLine":117,"endColumn":40},{"ruleId":"403","severity":1,"message":"424","line":15,"column":9,"nodeType":"405","messageId":"406","endLine":15,"endColumn":27},{"ruleId":"410","severity":1,"message":"425","line":75,"column":8,"nodeType":"412","endLine":75,"endColumn":10,"suggestions":"426"},{"ruleId":"417","severity":1,"message":"427","line":86,"column":17,"nodeType":"419","endLine":86,"endColumn":75},{"ruleId":"428","severity":1,"message":"429","line":5,"column":6,"nodeType":"430","messageId":"431","endLine":7,"endColumn":7,"fix":"432"},{"ruleId":"428","severity":1,"message":"433","line":8,"column":6,"nodeType":"430","messageId":"431","endLine":10,"endColumn":7,"fix":"434"},{"ruleId":"428","severity":1,"message":"435","line":5,"column":5,"nodeType":"430","messageId":"431","endLine":7,"endColumn":6,"fix":"436"},{"ruleId":"428","severity":1,"message":"437","line":8,"column":5,"nodeType":"430","messageId":"431","endLine":10,"endColumn":6,"fix":"438"},{"ruleId":"428","severity":1,"message":"439","line":11,"column":5,"nodeType":"430","messageId":"431","endLine":16,"endColumn":6,"fix":"440"},{"ruleId":"403","severity":1,"message":"415","line":2,"column":9,"nodeType":"405","messageId":"406","endLine":2,"endColumn":18},{"ruleId":"403","severity":1,"message":"441","line":2,"column":20,"nodeType":"405","messageId":"406","endLine":2,"endColumn":29},{"ruleId":"403","severity":1,"message":"442","line":2,"column":31,"nodeType":"405","messageId":"406","endLine":2,"endColumn":38},{"ruleId":"403","severity":1,"message":"416","line":3,"column":9,"nodeType":"405","messageId":"406","endLine":3,"endColumn":15},{"ruleId":"403","severity":1,"message":"443","line":5,"column":7,"nodeType":"405","messageId":"406","endLine":5,"endColumn":8},{"ruleId":"428","severity":1,"message":"444","line":8,"column":5,"nodeType":"430","messageId":"431","endLine":11,"endColumn":6,"fix":"445"},{"ruleId":"428","severity":1,"message":"446","line":8,"column":5,"nodeType":"430","messageId":"431","endLine":26,"endColumn":6,"fix":"447"},{"ruleId":"428","severity":1,"message":"448","line":27,"column":5,"nodeType":"430","messageId":"431","endLine":41,"endColumn":6,"fix":"449"},{"ruleId":"428","severity":1,"message":"450","line":42,"column":5,"nodeType":"430","messageId":"431","endLine":49,"endColumn":6,"fix":"451"},{"ruleId":"428","severity":1,"message":"452","line":50,"column":5,"nodeType":"430","messageId":"431","endLine":56,"endColumn":6,"fix":"453"},{"ruleId":"428","severity":1,"message":"454","line":57,"column":5,"nodeType":"430","messageId":"431","endLine":70,"endColumn":6,"fix":"455"},{"ruleId":"428","severity":1,"message":"456","line":71,"column":5,"nodeType":"430","messageId":"431","endLine":81,"endColumn":6,"fix":"457"},{"ruleId":"428","severity":1,"message":"458","line":82,"column":5,"nodeType":"430","messageId":"431","endLine":102,"endColumn":6,"fix":"459"},{"ruleId":"428","severity":1,"message":"460","line":103,"column":5,"nodeType":"430","messageId":"431","endLine":115,"endColumn":6,"fix":"461"},{"ruleId":"428","severity":1,"message":"462","line":116,"column":5,"nodeType":"430","messageId":"431","endLine":126,"endColumn":6,"fix":"463"},{"ruleId":"428","severity":1,"message":"464","line":127,"column":5,"nodeType":"430","messageId":"431","endLine":138,"endColumn":6,"fix":"465"},{"ruleId":"428","severity":1,"message":"466","line":139,"column":5,"nodeType":"430","messageId":"431","endLine":146,"endColumn":6,"fix":"467"},{"ruleId":"428","severity":1,"message":"468","line":147,"column":5,"nodeType":"430","messageId":"431","endLine":157,"endColumn":6,"fix":"469"},{"ruleId":"470","severity":1,"message":"471","line":17,"column":23,"nodeType":"405","messageId":"472","endLine":17,"endColumn":32},{"ruleId":"470","severity":1,"message":"473","line":18,"column":22,"nodeType":"405","messageId":"472","endLine":18,"endColumn":31},{"ruleId":"403","severity":1,"message":"474","line":12,"column":7,"nodeType":"405","messageId":"406","endLine":12,"endColumn":11},{"ruleId":"403","severity":1,"message":"475","line":118,"column":10,"nodeType":"405","messageId":"406","endLine":118,"endColumn":24},{"ruleId":"403","severity":1,"message":"443","line":8,"column":7,"nodeType":"405","messageId":"406","endLine":8,"endColumn":8},{"ruleId":"403","severity":1,"message":"476","line":23,"column":9,"nodeType":"405","messageId":"406","endLine":23,"endColumn":13},{"ruleId":"417","severity":1,"message":"477","line":31,"column":13,"nodeType":"419","endLine":31,"endColumn":61},{"ruleId":"417","severity":1,"message":"477","line":34,"column":24,"nodeType":"419","endLine":35,"endColumn":80},{"ruleId":"403","severity":1,"message":"478","line":7,"column":9,"nodeType":"405","messageId":"406","endLine":7,"endColumn":23},{"ruleId":"403","severity":1,"message":"479","line":10,"column":8,"nodeType":"405","messageId":"406","endLine":10,"endColumn":15},{"ruleId":"403","severity":1,"message":"480","line":11,"column":9,"nodeType":"405","messageId":"406","endLine":11,"endColumn":14},{"ruleId":"417","severity":1,"message":"481","line":37,"column":42,"nodeType":"419","endLine":37,"endColumn":90},{"ruleId":"417","severity":1,"message":"481","line":38,"column":28,"nodeType":"419","endLine":38,"endColumn":76},{"ruleId":"417","severity":1,"message":"481","line":44,"column":21,"nodeType":"419","endLine":47,"endColumn":23},{"ruleId":"417","severity":1,"message":"482","line":69,"column":21,"nodeType":"419","endLine":69,"endColumn":47},{"ruleId":"403","severity":1,"message":"483","line":9,"column":26,"nodeType":"405","messageId":"406","endLine":9,"endColumn":41},{"ruleId":"403","severity":1,"message":"484","line":58,"column":11,"nodeType":"405","messageId":"406","endLine":58,"endColumn":15},{"ruleId":"403","severity":1,"message":"485","line":69,"column":14,"nodeType":"405","messageId":"406","endLine":69,"endColumn":24},{"ruleId":"403","severity":1,"message":"443","line":18,"column":7,"nodeType":"405","messageId":"406","endLine":18,"endColumn":8},{"ruleId":"403","severity":1,"message":"486","line":74,"column":14,"nodeType":"405","messageId":"406","endLine":74,"endColumn":35},{"ruleId":"403","severity":1,"message":"487","line":86,"column":14,"nodeType":"405","messageId":"406","endLine":86,"endColumn":33},{"ruleId":"417","severity":1,"message":"488","line":222,"column":13,"nodeType":"419","endLine":225,"endColumn":15},{"ruleId":"417","severity":1,"message":"489","line":223,"column":51,"nodeType":"419","endLine":223,"endColumn":94},{"ruleId":"417","severity":1,"message":"488","line":226,"column":13,"nodeType":"419","endLine":230,"endColumn":15},{"ruleId":"417","severity":1,"message":"490","line":228,"column":51,"nodeType":"419","endLine":228,"endColumn":99},{"ruleId":"403","severity":1,"message":"491","line":14,"column":8,"nodeType":"405","messageId":"406","endLine":14,"endColumn":18},{"ruleId":"403","severity":1,"message":"492","line":15,"column":8,"nodeType":"405","messageId":"406","endLine":15,"endColumn":11},{"ruleId":"403","severity":1,"message":"493","line":16,"column":9,"nodeType":"405","messageId":"406","endLine":16,"endColumn":18},{"ruleId":"403","severity":1,"message":"414","line":30,"column":11,"nodeType":"405","messageId":"406","endLine":30,"endColumn":18},{"ruleId":"410","severity":1,"message":"494","line":42,"column":8,"nodeType":"412","endLine":42,"endColumn":10,"suggestions":"495"},{"ruleId":"417","severity":1,"message":"488","line":113,"column":13,"nodeType":"419","endLine":116,"endColumn":15},{"ruleId":"417","severity":1,"message":"489","line":114,"column":51,"nodeType":"419","endLine":114,"endColumn":108},{"ruleId":"417","severity":1,"message":"488","line":117,"column":13,"nodeType":"419","endLine":121,"endColumn":15},{"ruleId":"417","severity":1,"message":"490","line":119,"column":51,"nodeType":"419","endLine":119,"endColumn":99},{"ruleId":"417","severity":1,"message":"488","line":122,"column":13,"nodeType":"419","endLine":126,"endColumn":15},{"ruleId":"417","severity":1,"message":"488","line":127,"column":13,"nodeType":"419","endLine":130,"endColumn":15},{"ruleId":"403","severity":1,"message":"480","line":3,"column":36,"nodeType":"405","messageId":"406","endLine":3,"endColumn":41},{"ruleId":"403","severity":1,"message":"496","line":5,"column":9,"nodeType":"405","messageId":"406","endLine":5,"endColumn":20},{"ruleId":"410","severity":1,"message":"497","line":33,"column":8,"nodeType":"412","endLine":33,"endColumn":10,"suggestions":"498"},{"ruleId":"410","severity":1,"message":"499","line":110,"column":8,"nodeType":"412","endLine":110,"endColumn":10,"suggestions":"500"},{"ruleId":"410","severity":1,"message":"501","line":114,"column":8,"nodeType":"412","endLine":114,"endColumn":22,"suggestions":"502"},{"ruleId":"410","severity":1,"message":"503","line":122,"column":8,"nodeType":"412","endLine":122,"endColumn":18,"suggestions":"504"},{"ruleId":"403","severity":1,"message":"505","line":7,"column":9,"nodeType":"405","messageId":"406","endLine":7,"endColumn":21},{"ruleId":"506","severity":1,"message":"507","line":3,"column":47,"nodeType":"508","messageId":"509","endLine":3,"endColumn":49},{"ruleId":"510","severity":1,"message":"511","line":3,"column":63,"nodeType":"508","messageId":"512","endLine":3,"endColumn":64},{"ruleId":"510","severity":1,"message":"511","line":3,"column":69,"nodeType":"508","messageId":"512","endLine":3,"endColumn":70},{"ruleId":"403","severity":1,"message":"513","line":4,"column":26,"nodeType":"405","messageId":"406","endLine":4,"endColumn":29},{"ruleId":"403","severity":1,"message":"514","line":10,"column":5,"nodeType":"405","messageId":"406","endLine":10,"endColumn":23},{"ruleId":"403","severity":1,"message":"515","line":11,"column":20,"nodeType":"405","messageId":"406","endLine":11,"endColumn":41},{"ruleId":"403","severity":1,"message":"516","line":12,"column":5,"nodeType":"405","messageId":"406","endLine":12,"endColumn":16},{"ruleId":"403","severity":1,"message":"517","line":13,"column":28,"nodeType":"405","messageId":"406","endLine":13,"endColumn":42},{"ruleId":"403","severity":1,"message":"518","line":18,"column":23,"nodeType":"405","messageId":"406","endLine":18,"endColumn":38},{"ruleId":"403","severity":1,"message":"519","line":19,"column":9,"nodeType":"405","messageId":"406","endLine":19,"endColumn":22},{"ruleId":"403","severity":1,"message":"520","line":88,"column":11,"nodeType":"405","messageId":"406","endLine":88,"endColumn":16},{"ruleId":"410","severity":1,"message":"521","line":136,"column":8,"nodeType":"412","endLine":136,"endColumn":42,"suggestions":"522"},{"ruleId":"417","severity":1,"message":"523","line":298,"column":9,"nodeType":"419","endLine":300,"endColumn":135},{"ruleId":"417","severity":1,"message":"524","line":301,"column":9,"nodeType":"419","endLine":302,"endColumn":75},{"ruleId":"417","severity":1,"message":"418","line":315,"column":17,"nodeType":"419","endLine":321,"endColumn":55},{"ruleId":"417","severity":1,"message":"525","line":329,"column":17,"nodeType":"419","endLine":358,"endColumn":25},{"ruleId":"417","severity":1,"message":"525","line":379,"column":48,"nodeType":"419","endLine":398,"endColumn":19},{"ruleId":"417","severity":1,"message":"526","line":404,"column":17,"nodeType":"419","endLine":405,"endColumn":82},{"ruleId":"403","severity":1,"message":"527","line":4,"column":9,"nodeType":"405","messageId":"406","endLine":4,"endColumn":28},{"ruleId":"403","severity":1,"message":"528","line":6,"column":50,"nodeType":"405","messageId":"406","endLine":6,"endColumn":61},{"ruleId":"403","severity":1,"message":"483","line":10,"column":40,"nodeType":"405","messageId":"406","endLine":10,"endColumn":55},{"ruleId":"403","severity":1,"message":"529","line":17,"column":9,"nodeType":"405","messageId":"406","endLine":17,"endColumn":24},{"ruleId":"417","severity":1,"message":"530","line":85,"column":14,"nodeType":"419","endLine":86,"endColumn":65},{"ruleId":"417","severity":1,"message":"523","line":87,"column":12,"nodeType":"419","endLine":87,"endColumn":188},{"ruleId":"417","severity":1,"message":"525","line":102,"column":17,"nodeType":"419","endLine":137,"endColumn":100},{"ruleId":"403","severity":1,"message":"531","line":5,"column":7,"nodeType":"405","messageId":"406","endLine":5,"endColumn":9},{"ruleId":"403","severity":1,"message":"532","line":17,"column":8,"nodeType":"405","messageId":"406","endLine":17,"endColumn":12},{"ruleId":"403","severity":1,"message":"533","line":21,"column":24,"nodeType":"405","messageId":"406","endLine":21,"endColumn":37},{"ruleId":"403","severity":1,"message":"520","line":49,"column":11,"nodeType":"405","messageId":"406","endLine":49,"endColumn":16},{"ruleId":"403","severity":1,"message":"534","line":50,"column":11,"nodeType":"405","messageId":"406","endLine":50,"endColumn":16},{"ruleId":"410","severity":1,"message":"535","line":73,"column":8,"nodeType":"412","endLine":73,"endColumn":27,"suggestions":"536"},{"ruleId":"410","severity":1,"message":"537","line":81,"column":8,"nodeType":"412","endLine":81,"endColumn":24,"suggestions":"538"},{"ruleId":"410","severity":1,"message":"539","line":123,"column":8,"nodeType":"412","endLine":123,"endColumn":15,"suggestions":"540"},{"ruleId":"410","severity":1,"message":"541","line":124,"column":45,"nodeType":"412","endLine":124,"endColumn":57,"suggestions":"542"},{"ruleId":"417","severity":1,"message":"418","line":234,"column":17,"nodeType":"419","endLine":234,"endColumn":99},{"ruleId":"417","severity":1,"message":"418","line":302,"column":21,"nodeType":"419","endLine":303,"endColumn":111},{"ruleId":"403","severity":1,"message":"543","line":4,"column":9,"nodeType":"405","messageId":"406","endLine":4,"endColumn":22},{"ruleId":"410","severity":1,"message":"544","line":45,"column":8,"nodeType":"412","endLine":45,"endColumn":18,"suggestions":"545"},{"ruleId":"403","severity":1,"message":"546","line":33,"column":12,"nodeType":"405","messageId":"406","endLine":33,"endColumn":18},{"ruleId":"410","severity":1,"message":"547","line":60,"column":8,"nodeType":"412","endLine":60,"endColumn":14,"suggestions":"548"},{"ruleId":"410","severity":1,"message":"549","line":86,"column":8,"nodeType":"412","endLine":86,"endColumn":31,"suggestions":"550"},{"ruleId":"403","severity":1,"message":"415","line":4,"column":9,"nodeType":"405","messageId":"406","endLine":4,"endColumn":18},{"ruleId":"417","severity":1,"message":"418","line":187,"column":21,"nodeType":"419","endLine":201,"endColumn":23},{"ruleId":"417","severity":1,"message":"551","line":214,"column":21,"nodeType":"419","endLine":215,"endColumn":132},{"ruleId":"417","severity":1,"message":"551","line":218,"column":36,"nodeType":"419","endLine":220,"endColumn":110},{"ruleId":"417","severity":1,"message":"552","line":222,"column":36,"nodeType":"419","endLine":223,"endColumn":95},{"ruleId":"403","severity":1,"message":"553","line":4,"column":9,"nodeType":"405","messageId":"406","endLine":4,"endColumn":19},{"ruleId":"403","severity":1,"message":"513","line":5,"column":8,"nodeType":"405","messageId":"406","endLine":5,"endColumn":11},{"ruleId":"417","severity":1,"message":"418","line":61,"column":21,"nodeType":"419","endLine":61,"endColumn":126},{"ruleId":"417","severity":1,"message":"418","line":64,"column":21,"nodeType":"419","endLine":64,"endColumn":115},{"ruleId":"417","severity":1,"message":"418","line":68,"column":25,"nodeType":"419","endLine":68,"endColumn":102},{"ruleId":"554","severity":1,"message":"555","line":132,"column":9,"nodeType":"556","messageId":"557","endLine":141,"endColumn":10},{"ruleId":"417","severity":1,"message":"418","line":154,"column":17,"nodeType":"419","endLine":154,"endColumn":98},{"ruleId":"417","severity":1,"message":"418","line":180,"column":21,"nodeType":"419","endLine":185,"endColumn":77},{"ruleId":"417","severity":1,"message":"418","line":186,"column":21,"nodeType":"419","endLine":188,"endColumn":98},{"ruleId":"417","severity":1,"message":"418","line":204,"column":25,"nodeType":"419","endLine":206,"endColumn":112},{"ruleId":"417","severity":1,"message":"418","line":209,"column":29,"nodeType":"419","endLine":211,"endColumn":113},"no-native-reassign",["558"],"no-negated-in-lhs",["559"],"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'PrivateRoute' is defined but never used.","'LogIn' is defined but never used.","'checkUser' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'oldStatus'. Either include it or remove the dependency array.","ArrayExpression",["560"],"'history' is assigned a value but never used.","'Basechart' is defined but never used.","'Status' is defined but never used.","react/jsx-pascal-case","Imported JSX component TextField_Component must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'startStatusPolling' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["561"],"Imported JSX component SideNavigationBar_Component must be in PascalCase or SCREAMING_SNAKE_CASE","no-useless-computed-key","Unnecessarily computed property [\"LOG_IN\"] found.","Property","unnecessarilyComputedProperty",{"range":"562","text":"563"},"Unnecessarily computed property [\"LOG_OUT\"] found.",{"range":"564","text":"565"},"Unnecessarily computed property [\"LOADING\"] found.",{"range":"566","text":"567"},"Unnecessarily computed property [\"LOADED\"] found.",{"range":"568","text":"569"},"Unnecessarily computed property [\"ERROR\"] found.",{"range":"570","text":"571"},"'Indicator' is defined but never used.","'Project' is defined but never used.","'_' is assigned a value but never used.","Unnecessarily computed property [\"ADD_NEW_INDICATOR_TEMPLATE\"] found.",{"range":"572","text":"573"},"Unnecessarily computed property [\"CREATE\"] found.",{"range":"574","text":"575"},"Unnecessarily computed property [\"MODIFY\"] found.",{"range":"576","text":"577"},"Unnecessarily computed property [\"REMOVE\"] found.",{"range":"578","text":"579"},"Unnecessarily computed property [\"DATABASE_ADD\"] found.",{"range":"580","text":"581"},"Unnecessarily computed property [\"REMOVE_BASECHART\"] found.",{"range":"582","text":"583"},"Unnecessarily computed property [\"ADD_BASECHART\"] found.",{"range":"584","text":"585"},"Unnecessarily computed property [\"MODIFY_BASECHART\"] found.",{"range":"586","text":"587"},"Unnecessarily computed property [\"ADD_INDICATOR\"] found.",{"range":"588","text":"589"},"Unnecessarily computed property [\"REMOVE_INDICATOR\"] found.",{"range":"590","text":"591"},"Unnecessarily computed property [\"MODIFY_INDICATOR\"] found.",{"range":"592","text":"593"},"Unnecessarily computed property [\"REMOVE_DRAFTS\"] found.",{"range":"594","text":"595"},"Unnecessarily computed property [\"UPDATE_STATUS\"] found.",{"range":"596","text":"597"},"no-use-before-define","'Basechart' was used before it was defined.","usedBeforeDefined","'Indicator' was used before it was defined.","'wait' is assigned a value but never used.","'updateProjects' is defined but never used.","'data' is assigned a value but never used.","Imported JSX component HistoryCell_Component must be in PascalCase or SCREAMING_SNAKE_CASE","'getAllProjects' is defined but never used.","'Divider' is defined but never used.","'Paper' is defined but never used.","Imported JSX component ProjectTab_Component must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component CreateProject_Component must be in PascalCase or SCREAMING_SNAKE_CASE","'removeBasechart' is defined but never used.","'user' is assigned a value but never used.","'logoutUser' is defined but never used.","'getSubtitleForOptions' is defined but never used.","'getSubtitleForRules' is defined but never used.","Imported JSX component SettingsCell_Component must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component BaseSettings_Component must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component IndicatorSettings_Component must be in PascalCase or SCREAMING_SNAKE_CASE","'IconButton' is defined but never used.","'Box' is defined but never used.","'ArrowBack' is defined but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["598"],"'useDispatch' is defined but never used.","React Hook useEffect has a missing dependency: 'project.statusText'. Either include it or remove the dependency array.",["599"],"React Hook useEffect has missing dependencies: 'items' and 'location.pathname'. Either include them or remove the dependency array.",["600"],"React Hook useEffect has a missing dependency: 'handleResizeForSelector'. Either include it or remove the dependency array.",["601"],"React Hook useEffect has a missing dependency: 'items'. Either include it or remove the dependency array.",["602"],"'startPolling' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-mixed-operators","Unexpected mix of '&' and '|'.","unexpectedMixedOperator","'Fab' is defined but never used.","'CloudUploadRounded' is defined but never used.","'EditAttributesRounded' is defined but never used.","'EditRounded' is defined but never used.","'NoteAddRounded' is defined but never used.","'modifyBasechart' is defined but never used.","'useFilePicker' is defined but never used.","'theme' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleChange' and 'loading'. Either include them or remove the dependency array. You can also do a functional update 'setLoading(l => ...)' if you only need 'loading' in the 'setLoading' call.",["603"],"Imported JSX component ChartPreviewDialog_Component must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component ImportBasechartDialog_Component must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component CustomTable_Component must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component TimeInput_Component must be in PascalCase or SCREAMING_SNAKE_CASE","'TextField_Component' is defined but never used.","'InsertChart' is defined but never used.","'projectsReducer' is defined but never used.","Imported JSX component AddIndicatorDialog_Component must be in PascalCase or SCREAMING_SNAKE_CASE","'fs' is assigned a value but never used.","'Grid' is defined but never used.","'RemoveRounded' is defined but never used.","'alert' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'transformData'. Either include it or remove the dependency array.",["604"],"React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array. You can also do a functional update 'setData(d => ...)' if you only need 'data' in the 'setData' call.",["605"],"React Hook useEffect has missing dependencies: 'alert', 'open', and 'setOpen'. Either include them or remove the dependency array. If 'setOpen' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["606"],"React Hook useEffect has a missing dependency: 'isDoneButtonDisabled'. Either include it or remove the dependency array.",["607"],"'DeleteRounded' is defined but never used.","React Hook useEffect has a missing dependency: 'onChange'. Either include it or remove the dependency array. If 'onChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["608"],"'fields' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'basechartId', 'indicatorId', and 'transformData'. Either include them or remove the dependency array.",["609"],"React Hook useEffect has missing dependencies: 'indicator' and 'transformData'. Either include them or remove the dependency array.",["610"],"Imported JSX component IndicatorCreator_Component must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Indicator_Component must be in PascalCase or SCREAMING_SNAKE_CASE","'AddRounded' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation",{"desc":"611","fix":"612"},{"desc":"613","fix":"614"},[173,183],"\"LOG_IN\"",[336,347],"\"LOG_OUT\"",[138,149],"\"LOADING\"",[204,214],"\"LOADED\"",[270,279],"\"ERROR\"",[267,297],"\"ADD_NEW_INDICATOR_TEMPLATE\"",[268,278],"\"CREATE\"",[989,999],"\"MODIFY\"",[1562,1572],"\"REMOVE\"",[1802,1818],"\"DATABASE_ADD\"",[2017,2037],"\"REMOVE_BASECHART\"",[2515,2532],"\"ADD_BASECHART\"",[2953,2973],"\"MODIFY_BASECHART\"",[3845,3862],"\"ADD_INDICATOR\"",[4439,4459],"\"REMOVE_INDICATOR\"",[4969,4989],"\"MODIFY_INDICATOR\"",[5562,5579],"\"REMOVE_DRAFTS\"",[5872,5889],"\"UPDATE_STATUS\"",{"desc":"615","fix":"616"},{"desc":"617","fix":"618"},{"desc":"619","fix":"620"},{"desc":"621","fix":"622"},{"desc":"623","fix":"624"},{"desc":"625","fix":"626"},{"desc":"627","fix":"628"},{"desc":"629","fix":"630"},{"desc":"631","fix":"632"},{"desc":"633","fix":"634"},{"desc":"635","fix":"636"},{"desc":"637","fix":"638"},{"desc":"639","fix":"640"},"Update the dependencies array to be: [loading, oldStatus]",{"range":"641","text":"642"},"Update the dependencies array to be: [dispatch]",{"range":"643","text":"644"},"Update the dependencies array to be: [id]",{"range":"645","text":"646"},"Update the dependencies array to be: [project.statusText]",{"range":"647","text":"648"},"Update the dependencies array to be: [items, location.pathname]",{"range":"649","text":"650"},"Update the dependencies array to be: [activeItemId, handleResizeForSelector]",{"range":"651","text":"652"},"Update the dependencies array to be: [items, location]",{"range":"653","text":"654"},"Update the dependencies array to be: [handleChange, loading, targetDataDropzone.acceptedFiles]",{"range":"655","text":"656"},"Update the dependencies array to be: [selectedBasechart, transformData]",{"range":"657","text":"658"},"Update the dependencies array to be: [data, editorSettings]",{"range":"659","text":"660"},"Update the dependencies array to be: [alert, files, open, setOpen]",{"range":"661","text":"662"},"Update the dependencies array to be: [basecharts, isDoneButtonDisabled]",{"range":"663","text":"664"},"Update the dependencies array to be: [onChange, selected]",{"range":"665","text":"666"},"Update the dependencies array to be: [basechartId, indicatorId, open, transformData]",{"range":"667","text":"668"},"Update the dependencies array to be: [indicator, selectedIndicatorFile, transformData]",{"range":"669","text":"670"},[803,812],"[loading, oldStatus]",[2804,2806],"[dispatch]",[1730,1732],"[id]",[1212,1214],"[project.statusText]",[3059,3061],"[items, location.pathname]",[3133,3147],"[activeItemId, handleResizeForSelector]",[3343,3353],"[items, location]",[4620,4654],"[handleChange, loading, targetDataDropzone.acceptedFiles]",[2229,2248],"[selectedBasechart, transformData]",[2454,2470],"[data, editorSettings]",[5612,5619],"[alert, files, open, setOpen]",[5666,5678],"[basecharts, isDoneButtonDisabled]",[1357,1367],"[onChange, selected]",[1996,2002],"[basechartId, indicatorId, open, transformData]",[2964,2987],"[indicator, selectedIndicatorFile, transformData]"]